
BackspacePedal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000110c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000110c  000011a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000048  00800068  00800068  000011a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000011a8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000011d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000090  00000000  00000000  000011f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000014  00000000  00000000  00001288  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001d2  00000000  00000000  0000129c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	65 c0       	rjmp	.+202    	; 0xcc <__ctors_end>
       2:	ac c0       	rjmp	.+344    	; 0x15c <__vector_1>
       4:	7e c0       	rjmp	.+252    	; 0x102 <__bad_interrupt>
       6:	7d c0       	rjmp	.+250    	; 0x102 <__bad_interrupt>
       8:	7c c0       	rjmp	.+248    	; 0x102 <__bad_interrupt>
       a:	7b c0       	rjmp	.+246    	; 0x102 <__bad_interrupt>
       c:	7a c0       	rjmp	.+244    	; 0x102 <__bad_interrupt>
       e:	79 c0       	rjmp	.+242    	; 0x102 <__bad_interrupt>
      10:	78 c0       	rjmp	.+240    	; 0x102 <__bad_interrupt>
      12:	77 c0       	rjmp	.+238    	; 0x102 <__bad_interrupt>
      14:	76 c0       	rjmp	.+236    	; 0x102 <__bad_interrupt>
      16:	75 c0       	rjmp	.+234    	; 0x102 <__bad_interrupt>
      18:	74 c0       	rjmp	.+232    	; 0x102 <__bad_interrupt>
      1a:	73 c0       	rjmp	.+230    	; 0x102 <__bad_interrupt>
      1c:	72 c0       	rjmp	.+228    	; 0x102 <__bad_interrupt>

0000001e <__trampolines_end>:
      1e:	05 01       	movw	r0, r10
      20:	09 06       	cpc	r0, r25
      22:	a1 01       	movw	r20, r2
      24:	05 07       	cpc	r16, r21
      26:	19 e0       	ldi	r17, 0x09	; 9
      28:	29 e7       	ldi	r18, 0x79	; 121
      2a:	15 00       	.word	0x0015	; ????
      2c:	25 01       	movw	r4, r10
      2e:	75 01       	movw	r14, r10
      30:	95 08       	sbc	r9, r5
      32:	81 02       	muls	r24, r17
      34:	95 01       	movw	r18, r10
      36:	75 08       	sbc	r7, r5
      38:	81 03       	fmuls	r16, r17
      3a:	95 05       	cpc	r25, r5
      3c:	75 01       	movw	r14, r10
      3e:	05 08       	sbc	r0, r5
      40:	19 01       	movw	r2, r18
      42:	29 05       	cpc	r18, r9
      44:	91 02       	muls	r25, r17
      46:	95 01       	movw	r18, r10
      48:	75 03       	mulsu	r23, r21
      4a:	91 03       	fmuls	r17, r17
      4c:	95 06       	cpc	r9, r21
      4e:	75 08       	sbc	r7, r5
      50:	15 00       	.word	0x0015	; ????
      52:	25 65       	ori	r18, 0x55	; 85
      54:	05 07       	cpc	r16, r21
      56:	19 00       	.word	0x0019	; ????
      58:	29 65       	ori	r18, 0x59	; 89
      5a:	81 00       	.word	0x0081	; ????
      5c:	c0 04       	cpc	r12, r0

0000005d <usbDescriptorString0>:
      5d:	04 03 09 04                                         ....

00000061 <usbDescriptorStringVendor>:
      61:	18 03 66 00 6c 00 69 00 70 00 77 00 6f 00 72 00     ..f.l.i.p.w.o.r.
      71:	6b 00 2e 00 6e 00 6c 00                             k...n.l.

00000079 <usbDescriptorStringDevice>:
      79:	1e 03 34 00 2d 00 4b 00 65 00 79 00 2d 00 4b 00     ..4.-.K.e.y.-.K.
      89:	65 00 79 00 62 00 6f 00 61 00 72 00 64 00           e.y.b.o.a.r.d.

00000097 <usbDescriptorDevice>:
      97:	12 01 10 01 00 00 00 08 c0 16 db 27 00 01 01 02     ...........'....
      a7:	00 01                                               ..

000000a9 <usbDescriptorConfiguration>:
      a9:	09 02 22 00 01 01 00 80 19 09 04 00 00 01 03 00     ..".............
      b9:	00 00 09 21 01 01 00 01 22 3f 00 07 05 81 03 08     ...!...."?......
      c9:	00 0a 00                                            ...

000000cc <__ctors_end>:
      cc:	11 24       	eor	r1, r1
      ce:	1f be       	out	0x3f, r1	; 63
      d0:	cf e5       	ldi	r28, 0x5F	; 95
      d2:	d2 e0       	ldi	r29, 0x02	; 2
      d4:	de bf       	out	0x3e, r29	; 62
      d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
      d8:	10 e0       	ldi	r17, 0x00	; 0
      da:	a0 e6       	ldi	r26, 0x60	; 96
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	ec e0       	ldi	r30, 0x0C	; 12
      e0:	f1 e1       	ldi	r31, 0x11	; 17
      e2:	02 c0       	rjmp	.+4      	; 0xe8 <__do_copy_data+0x10>
      e4:	05 90       	lpm	r0, Z+
      e6:	0d 92       	st	X+, r0
      e8:	a8 36       	cpi	r26, 0x68	; 104
      ea:	b1 07       	cpc	r27, r17
      ec:	d9 f7       	brne	.-10     	; 0xe4 <__do_copy_data+0xc>

000000ee <__do_clear_bss>:
      ee:	20 e0       	ldi	r18, 0x00	; 0
      f0:	a8 e6       	ldi	r26, 0x68	; 104
      f2:	b0 e0       	ldi	r27, 0x00	; 0
      f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
      f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
      f8:	a0 3b       	cpi	r26, 0xB0	; 176
      fa:	b2 07       	cpc	r27, r18
      fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>
      fe:	01 d3       	rcall	.+1538   	; 0x702 <main>
     100:	03 c8       	rjmp	.-4090   	; 0xfffff108 <__eeprom_end+0xff7ef108>

00000102 <__bad_interrupt>:
     102:	7e cf       	rjmp	.-260    	; 0x0 <__vectors>

00000104 <usbCrc16>:
;   poly    r20+r21
;   scratch r23
;   resCrc  r24+r25 / r16+r17
;   ptr     X / Z
usbCrc16:
    mov     ptrL, argPtrL
     104:	a8 2f       	mov	r26, r24
    mov     ptrH, argPtrH
     106:	b9 2f       	mov	r27, r25
    ldi     resCrcL, 0
     108:	80 e0       	ldi	r24, 0x00	; 0
    ldi     resCrcH, 0
     10a:	90 e0       	ldi	r25, 0x00	; 0
    ldi     polyL, lo8(0xa001)
     10c:	41 e0       	ldi	r20, 0x01	; 1
    ldi     polyH, hi8(0xa001)
     10e:	50 ea       	ldi	r21, 0xA0	; 160
    com     argLen      ; argLen = -argLen - 1: modified loop to ensure that carry is set
     110:	60 95       	com	r22
    ldi     bitCnt, 0   ; loop counter with starnd condition = end condition
     112:	30 e0       	ldi	r19, 0x00	; 0
    rjmp    usbCrcLoopEntry
     114:	09 c0       	rjmp	.+18     	; 0x128 <usbCrcLoopEntry>

00000116 <usbCrcByteLoop>:
usbCrcByteLoop:
    ld      byte, ptr+
     116:	2d 91       	ld	r18, X+
    eor     resCrcL, byte
     118:	82 27       	eor	r24, r18

0000011a <usbCrcBitLoop>:
usbCrcBitLoop:
    ror     resCrcH     ; carry is always set here (see brcs jumps to here)
     11a:	97 95       	ror	r25
    ror     resCrcL
     11c:	87 95       	ror	r24
    brcs    usbCrcNoXor
     11e:	10 f0       	brcs	.+4      	; 0x124 <usbCrcNoXor>
    eor     resCrcL, polyL
     120:	84 27       	eor	r24, r20
    eor     resCrcH, polyH
     122:	95 27       	eor	r25, r21

00000124 <usbCrcNoXor>:
usbCrcNoXor:
    subi    bitCnt, 224 ; (8 * 224) % 256 = 0; this loop iterates 8 times
     124:	30 5e       	subi	r19, 0xE0	; 224
    brcs    usbCrcBitLoop
     126:	c8 f3       	brcs	.-14     	; 0x11a <usbCrcBitLoop>

00000128 <usbCrcLoopEntry>:
usbCrcLoopEntry:
    subi    argLen, -1
     128:	6f 5f       	subi	r22, 0xFF	; 255
    brcs    usbCrcByteLoop
     12a:	a8 f3       	brcs	.-22     	; 0x116 <usbCrcByteLoop>

0000012c <usbCrcReady>:
usbCrcReady:
    ret
     12c:	08 95       	ret

0000012e <usbCrc16Append>:

#endif /* USB_USE_FAST_CRC */

; extern unsigned usbCrc16Append(unsigned char *data, unsigned char len);
usbCrc16Append:
    rcall   usbCrc16
     12e:	ea df       	rcall	.-44     	; 0x104 <usbCrc16>
    st      ptr+, resCrcL
     130:	8d 93       	st	X+, r24
    st      ptr+, resCrcH
     132:	9d 93       	st	X+, r25
    ret
     134:	08 95       	ret

00000136 <usbMeasureFrameLength>:

; extern unsigned usbMeasurePacketLength(void);
; returns time between two idle strobes in multiples of 7 CPU clocks
.global usbMeasureFrameLength
usbMeasureFrameLength:
    ldi     cntH, 6         ; wait ~ 10 ms for D- == 0
     136:	a6 e0       	ldi	r26, 0x06	; 6
    clr     cnt16L
     138:	88 27       	eor	r24, r24
    clr     cnt16H
     13a:	99 27       	eor	r25, r25

0000013c <usbMFTime16>:
usbMFTime16:
    dec     cntH
     13c:	aa 95       	dec	r26
    breq    usbMFTimeout
     13e:	69 f0       	breq	.+26     	; 0x15a <usbMFTimeout>

00000140 <usbMFWaitStrobe>:
usbMFWaitStrobe:            ; first wait for D- == 0 (idle strobe)
    sbiw    cnt16, 1        ;[0] [6]
     140:	01 97       	sbiw	r24, 0x01	; 1
    breq    usbMFTime16     ;[2]
     142:	e1 f3       	breq	.-8      	; 0x13c <usbMFTime16>
    sbic    USBIN, USBMINUS ;[3]
     144:	b0 99       	sbic	0x16, 0	; 22
    rjmp    usbMFWaitStrobe ;[4]
     146:	fc cf       	rjmp	.-8      	; 0x140 <usbMFWaitStrobe>

00000148 <usbMFWaitIdle>:
usbMFWaitIdle:              ; then wait until idle again
    sbis    USBIN, USBMINUS ;1 wait for D- == 1
     148:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    usbMFWaitIdle   ;2
     14a:	fe cf       	rjmp	.-4      	; 0x148 <usbMFWaitIdle>
    ldi     cnt16L, 1       ;1 represents cycles so far
     14c:	81 e0       	ldi	r24, 0x01	; 1
    clr     cnt16H          ;1
     14e:	99 27       	eor	r25, r25

00000150 <usbMFWaitLoop>:
usbMFWaitLoop:
    in      cntH, USBIN     ;[0] [7]
     150:	a6 b3       	in	r26, 0x16	; 22
    adiw    cnt16, 1        ;[1]
     152:	01 96       	adiw	r24, 0x01	; 1
    breq    usbMFTimeout    ;[3]
     154:	11 f0       	breq	.+4      	; 0x15a <usbMFTimeout>
    andi    cntH, USBMASK   ;[4]
     156:	a5 70       	andi	r26, 0x05	; 5
    brne    usbMFWaitLoop   ;[5]
     158:	d9 f7       	brne	.-10     	; 0x150 <usbMFWaitLoop>

0000015a <usbMFTimeout>:
usbMFTimeout:
#if resL != cnt16L
    mov     resL, cnt16L
    mov     resH, cnt16H
#endif
    ret
     15a:	08 95       	ret

0000015c <__vector_1>:
;max allowable interrupt latency: 34 cycles -> max 25 cycles interrupt disable
;max stack usage: [ret(2), YL, SREG, YH, shift, x1, x2, x3, cnt, x4] = 11 bytes
;Numbers in brackets are maximum cycles since SOF.
USB_INTR_VECTOR:
;order of registers pushed: YL, SREG [sofError], YH, shift, x1, x2, x3, cnt
    push    YL              ;2 [35] push only what is necessary to sync with edge ASAP
     15c:	cf 93       	push	r28
    in      YL, SREG        ;1 [37]
     15e:	cf b7       	in	r28, 0x3f	; 63
    push    YL              ;2 [39]
     160:	cf 93       	push	r28

00000162 <waitForJ>:
;sync up with J to K edge during sync pattern -- use fastest possible loops
;The first part waits at most 1 bit long since we must be in sync pattern.
;YL is guarenteed to be < 0x80 because I flag is clear. When we jump to
;waitForJ, ensure that this prerequisite is met.
waitForJ:
    inc     YL
     162:	c3 95       	inc	r28
    sbis    USBIN, USBMINUS
     164:	b0 9b       	sbis	0x16, 0	; 22
    brne    waitForJ        ; just make sure we have ANY timeout
     166:	e9 f7       	brne	.-6      	; 0x162 <waitForJ>

00000168 <waitForK>:
waitForK:
;The following code results in a sampling window of 1/4 bit which meets the spec.
    sbis    USBIN, USBMINUS
     168:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    foundK
     16a:	09 c0       	rjmp	.+18     	; 0x17e <foundK>
    sbis    USBIN, USBMINUS
     16c:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    foundK
     16e:	07 c0       	rjmp	.+14     	; 0x17e <foundK>
    sbis    USBIN, USBMINUS
     170:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    foundK
     172:	05 c0       	rjmp	.+10     	; 0x17e <foundK>
    sbis    USBIN, USBMINUS
     174:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    foundK
     176:	03 c0       	rjmp	.+6      	; 0x17e <foundK>
    sbis    USBIN, USBMINUS
     178:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    foundK
     17a:	01 c0       	rjmp	.+2      	; 0x17e <foundK>
    sts     usbSofCount, YL
#endif  /* USB_COUNT_SOF */
#ifdef USB_SOF_HOOK
    USB_SOF_HOOK
#endif
    rjmp    sofError
     17c:	a3 c0       	rjmp	.+326    	; 0x2c4 <sofError>

0000017e <foundK>:
foundK:
;{3, 5} after falling D- edge, average delay: 4 cycles [we want 4 for center sampling]
;we have 1 bit time for setup purposes, then sample again. Numbers in brackets
;are cycles from center of first sync (double K) bit after the instruction
    push    YH                  ;2 [2]
     17e:	df 93       	push	r29
    lds     YL, usbInputBufOffset;2 [4]
     180:	c0 91 93 00 	lds	r28, 0x0093
    clr     YH                  ;1 [5]
     184:	dd 27       	eor	r29, r29
    subi    YL, lo8(-(usbRxBuf));1 [6]
     186:	c6 56       	subi	r28, 0x66	; 102
    sbci    YH, hi8(-(usbRxBuf));1 [7]
     188:	df 4f       	sbci	r29, 0xFF	; 255

    sbis    USBIN, USBMINUS ;1 [8] we want two bits K [sample 1 cycle too early]
     18a:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    haveTwoBitsK    ;2 [10]
     18c:	02 c0       	rjmp	.+4      	; 0x192 <haveTwoBitsK>
    pop     YH              ;2 [11] undo the push from before
     18e:	df 91       	pop	r29
    rjmp    waitForK        ;2 [13] this was not the end of sync, retry
     190:	eb cf       	rjmp	.-42     	; 0x168 <waitForK>

00000192 <haveTwoBitsK>:
haveTwoBitsK:
;----------------------------------------------------------------------------
; push more registers and initialize values while we sample the first bits:
;----------------------------------------------------------------------------
    push    shift           ;2 [16]
     192:	2f 93       	push	r18
    push    x1              ;2 [12]
     194:	0f 93       	push	r16
    push    x2              ;2 [14]
     196:	1f 93       	push	r17

    in      x1, USBIN       ;1 [17] <-- sample bit 0
     198:	06 b3       	in	r16, 0x16	; 22
    ldi     shift, 0xff     ;1 [18]
     19a:	2f ef       	ldi	r18, 0xFF	; 255
    bst     x1, USBMINUS    ;1 [19]
     19c:	00 fb       	bst	r16, 0
    bld     shift, 0        ;1 [20]
     19e:	20 f9       	bld	r18, 0
    push    x3              ;2 [22]
     1a0:	4f 93       	push	r20
    push    cnt             ;2 [24]
     1a2:	3f 93       	push	r19
    
    in      x2, USBIN       ;1 [25] <-- sample bit 1
     1a4:	16 b3       	in	r17, 0x16	; 22
    ser     x3              ;1 [26] [inserted init instruction]
     1a6:	4f ef       	ldi	r20, 0xFF	; 255
    eor     x1, x2          ;1 [27]
     1a8:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;1 [28]
     1aa:	00 fb       	bst	r16, 0
    bld     shift, 1        ;1 [29]
     1ac:	21 f9       	bld	r18, 1
    ldi     cnt, USB_BUFSIZE;1 [30] [inserted init instruction]
     1ae:	3b e0       	ldi	r19, 0x0B	; 11
    rjmp    rxbit2          ;2 [32]
     1b0:	31 c0       	rjmp	.+98     	; 0x214 <rxbit2>

000001b2 <unstuff0>:
;----------------------------------------------------------------------------
; Receiver loop (numbers in brackets are cycles within byte after instr)
;----------------------------------------------------------------------------

unstuff0:               ;1 (branch taken)
    andi    x3, ~0x01   ;1 [15]
     1b2:	4e 7f       	andi	r20, 0xFE	; 254
    mov     x1, x2      ;1 [16] x2 contains last sampled (stuffed) bit
     1b4:	01 2f       	mov	r16, r17
    in      x2, USBIN   ;1 [17] <-- sample bit 1 again
     1b6:	16 b3       	in	r17, 0x16	; 22
    ori     shift, 0x01 ;1 [18]
     1b8:	21 60       	ori	r18, 0x01	; 1
    rjmp    didUnstuff0 ;2 [20]
     1ba:	28 c0       	rjmp	.+80     	; 0x20c <didUnstuff0>

000001bc <unstuff1>:

unstuff1:               ;1 (branch taken)
    mov     x2, x1      ;1 [21] x1 contains last sampled (stuffed) bit
     1bc:	10 2f       	mov	r17, r16
    andi    x3, ~0x02   ;1 [22]
     1be:	4d 7f       	andi	r20, 0xFD	; 253
    ori     shift, 0x02 ;1 [23]
     1c0:	22 60       	ori	r18, 0x02	; 2
    nop                 ;1 [24]
     1c2:	00 00       	nop
    in      x1, USBIN   ;1 [25] <-- sample bit 2 again
     1c4:	06 b3       	in	r16, 0x16	; 22
    rjmp    didUnstuff1 ;2 [27]
     1c6:	29 c0       	rjmp	.+82     	; 0x21a <didUnstuff1>

000001c8 <unstuff2>:

unstuff2:               ;1 (branch taken)
    andi    x3, ~0x04   ;1 [29]
     1c8:	4b 7f       	andi	r20, 0xFB	; 251
    ori     shift, 0x04 ;1 [30]
     1ca:	24 60       	ori	r18, 0x04	; 4
    mov     x1, x2      ;1 [31] x2 contains last sampled (stuffed) bit
     1cc:	01 2f       	mov	r16, r17
    nop                 ;1 [32]
     1ce:	00 00       	nop
    in      x2, USBIN   ;1 [33] <-- sample bit 3
     1d0:	16 b3       	in	r17, 0x16	; 22
    rjmp    didUnstuff2 ;2 [35]
     1d2:	2b c0       	rjmp	.+86     	; 0x22a <didUnstuff2>

000001d4 <unstuff3>:

unstuff3:               ;1 (branch taken)
    in      x2, USBIN   ;1 [34] <-- sample stuffed bit 3 [one cycle too late]
     1d4:	16 b3       	in	r17, 0x16	; 22
    andi    x3, ~0x08   ;1 [35]
     1d6:	47 7f       	andi	r20, 0xF7	; 247
    ori     shift, 0x08 ;1 [36]
     1d8:	28 60       	ori	r18, 0x08	; 8
    rjmp    didUnstuff3 ;2 [38]
     1da:	2a c0       	rjmp	.+84     	; 0x230 <didUnstuff3>

000001dc <unstuff4>:

unstuff4:               ;1 (branch taken)
    andi    x3, ~0x10   ;1 [40]
     1dc:	4f 7e       	andi	r20, 0xEF	; 239
    in      x1, USBIN   ;1 [41] <-- sample stuffed bit 4
     1de:	06 b3       	in	r16, 0x16	; 22
    ori     shift, 0x10 ;1 [42]
     1e0:	20 61       	ori	r18, 0x10	; 16
    rjmp    didUnstuff4 ;2 [44]
     1e2:	2c c0       	rjmp	.+88     	; 0x23c <didUnstuff4>

000001e4 <unstuff5>:

unstuff5:               ;1 (branch taken)
    andi    x3, ~0x20   ;1 [48]
     1e4:	4f 7d       	andi	r20, 0xDF	; 223
    in      x2, USBIN   ;1 [49] <-- sample stuffed bit 5
     1e6:	16 b3       	in	r17, 0x16	; 22
    ori     shift, 0x20 ;1 [50]
     1e8:	20 62       	ori	r18, 0x20	; 32
    rjmp    didUnstuff5 ;2 [52]
     1ea:	2f c0       	rjmp	.+94     	; 0x24a <didUnstuff5>

000001ec <unstuff6>:

unstuff6:               ;1 (branch taken)
    andi    x3, ~0x40   ;1 [56]
     1ec:	4f 7b       	andi	r20, 0xBF	; 191
    in      x1, USBIN   ;1 [57] <-- sample stuffed bit 6
     1ee:	06 b3       	in	r16, 0x16	; 22
    ori     shift, 0x40 ;1 [58]
     1f0:	20 64       	ori	r18, 0x40	; 64
    rjmp    didUnstuff6 ;2 [60]
     1f2:	32 c0       	rjmp	.+100    	; 0x258 <didUnstuff6>

000001f4 <rxLoop>:
; bit 4:    none
; bit 5:    none
; bit 6:    none
; bit 7:    jump, eor
rxLoop:
    eor     x3, shift   ;1 [0] reconstruct: x3 is 0 at bit locations we changed, 1 at others
     1f4:	42 27       	eor	r20, r18
    in      x1, USBIN   ;1 [1] <-- sample bit 0
     1f6:	06 b3       	in	r16, 0x16	; 22
    st      y+, x3      ;2 [3] store data
     1f8:	49 93       	st	Y+, r20
    ser     x3          ;1 [4]
     1fa:	4f ef       	ldi	r20, 0xFF	; 255
    nop                 ;1 [5]
     1fc:	00 00       	nop
    eor     x2, x1      ;1 [6]
     1fe:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [7]
     200:	10 fb       	bst	r17, 0
    bld     shift, 0    ;1 [8]
     202:	20 f9       	bld	r18, 0
    in      x2, USBIN   ;1 [9] <-- sample bit 1 (or possibly bit 0 stuffed)
     204:	16 b3       	in	r17, 0x16	; 22
    andi    x2, USBMASK ;1 [10]
     206:	15 70       	andi	r17, 0x05	; 5
    breq    se0         ;1 [11] SE0 check for bit 1
     208:	c9 f1       	breq	.+114    	; 0x27c <se0>
    andi    shift, 0xf9 ;1 [12]
     20a:	29 7f       	andi	r18, 0xF9	; 249

0000020c <didUnstuff0>:
didUnstuff0:
    breq    unstuff0    ;1 [13]
     20c:	91 f2       	breq	.-92     	; 0x1b2 <unstuff0>
    eor     x1, x2      ;1 [14]
     20e:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [15]
     210:	00 fb       	bst	r16, 0
    bld     shift, 1    ;1 [16]
     212:	21 f9       	bld	r18, 1

00000214 <rxbit2>:
rxbit2:
    in      x1, USBIN   ;1 [17] <-- sample bit 2 (or possibly bit 1 stuffed)
     214:	06 b3       	in	r16, 0x16	; 22
    andi    shift, 0xf3 ;1 [18]
     216:	23 7f       	andi	r18, 0xF3	; 243
    breq    unstuff1    ;1 [19] do remaining work for bit 1
     218:	89 f2       	breq	.-94     	; 0x1bc <unstuff1>

0000021a <didUnstuff1>:
didUnstuff1:
    subi    cnt, 1      ;1 [20]
     21a:	31 50       	subi	r19, 0x01	; 1
    brcs    overflow    ;1 [21] loop control
     21c:	58 f1       	brcs	.+86     	; 0x274 <overflow>
    eor     x2, x1      ;1 [22]
     21e:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [23]
     220:	10 fb       	bst	r17, 0
    bld     shift, 2    ;1 [24]
     222:	22 f9       	bld	r18, 2
    in      x2, USBIN   ;1 [25] <-- sample bit 3 (or possibly bit 2 stuffed)
     224:	16 b3       	in	r17, 0x16	; 22
    andi    shift, 0xe7 ;1 [26]
     226:	27 7e       	andi	r18, 0xE7	; 231
    breq    unstuff2    ;1 [27]
     228:	79 f2       	breq	.-98     	; 0x1c8 <unstuff2>

0000022a <didUnstuff2>:
didUnstuff2:
    eor     x1, x2      ;1 [28]
     22a:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [29]
     22c:	00 fb       	bst	r16, 0
    bld     shift, 3    ;1 [30]
     22e:	23 f9       	bld	r18, 3

00000230 <didUnstuff3>:
didUnstuff3:
    andi    shift, 0xcf ;1 [31]
     230:	2f 7c       	andi	r18, 0xCF	; 207
    breq    unstuff3    ;1 [32]
     232:	81 f2       	breq	.-96     	; 0x1d4 <unstuff3>
    in      x1, USBIN   ;1 [33] <-- sample bit 4
     234:	06 b3       	in	r16, 0x16	; 22
    eor     x2, x1      ;1 [34]
     236:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [35]
     238:	10 fb       	bst	r17, 0
    bld     shift, 4    ;1 [36]
     23a:	24 f9       	bld	r18, 4

0000023c <didUnstuff4>:
didUnstuff4:
    andi    shift, 0x9f ;1 [37]
     23c:	2f 79       	andi	r18, 0x9F	; 159
    breq    unstuff4    ;1 [38]
     23e:	71 f2       	breq	.-100    	; 0x1dc <unstuff4>
    nop2                ;2 [40]
     240:	00 c0       	rjmp	.+0      	; 0x242 <didUnstuff4+0x6>
    in      x2, USBIN   ;1 [41] <-- sample bit 5
     242:	16 b3       	in	r17, 0x16	; 22
    eor     x1, x2      ;1 [42]
     244:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [43]
     246:	00 fb       	bst	r16, 0
    bld     shift, 5    ;1 [44]
     248:	25 f9       	bld	r18, 5

0000024a <didUnstuff5>:
didUnstuff5:
    andi    shift, 0x3f ;1 [45]
     24a:	2f 73       	andi	r18, 0x3F	; 63
    breq    unstuff5    ;1 [46]
     24c:	59 f2       	breq	.-106    	; 0x1e4 <unstuff5>
    nop2                ;2 [48]
     24e:	00 c0       	rjmp	.+0      	; 0x250 <didUnstuff5+0x6>
    in      x1, USBIN   ;1 [49] <-- sample bit 6
     250:	06 b3       	in	r16, 0x16	; 22
    eor     x2, x1      ;1 [50]
     252:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [51]
     254:	10 fb       	bst	r17, 0
    bld     shift, 6    ;1 [52]
     256:	26 f9       	bld	r18, 6

00000258 <didUnstuff6>:
didUnstuff6:
    cpi     shift, 0x02 ;1 [53]
     258:	22 30       	cpi	r18, 0x02	; 2
    brlo    unstuff6    ;1 [54]
     25a:	40 f2       	brcs	.-112    	; 0x1ec <unstuff6>
    nop2                ;2 [56]
     25c:	00 c0       	rjmp	.+0      	; 0x25e <didUnstuff6+0x6>
    in      x2, USBIN   ;1 [57] <-- sample bit 7
     25e:	16 b3       	in	r17, 0x16	; 22
    eor     x1, x2      ;1 [58]
     260:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [59]
     262:	00 fb       	bst	r16, 0
    bld     shift, 7    ;1 [60]
     264:	27 f9       	bld	r18, 7

00000266 <didUnstuff7>:
didUnstuff7:
    cpi     shift, 0x04 ;1 [61]
     266:	24 30       	cpi	r18, 0x04	; 4
    brsh    rxLoop      ;2 [63] loop control
     268:	28 f6       	brcc	.-118    	; 0x1f4 <rxLoop>

0000026a <unstuff7>:
unstuff7:
    andi    x3, ~0x80   ;1 [63]
     26a:	4f 77       	andi	r20, 0x7F	; 127
    ori     shift, 0x80 ;1 [64]
     26c:	20 68       	ori	r18, 0x80	; 128
    in      x2, USBIN   ;1 [65] <-- sample stuffed bit 7
     26e:	16 b3       	in	r17, 0x16	; 22
    nop                 ;1 [66]
     270:	00 00       	nop
    rjmp    didUnstuff7 ;2 [68]
     272:	f9 cf       	rjmp	.-14     	; 0x266 <didUnstuff7>

00000274 <overflow>:
*/

#define token   x1

overflow:
    ldi     x2, 1<<USB_INTR_PENDING_BIT
     274:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ; clear any pending interrupts
     276:	1a bf       	out	0x3a, r17	; 58

00000278 <ignorePacket>:
ignorePacket:
    clr     token
     278:	00 27       	eor	r16, r16
    rjmp    storeTokenAndReturn
     27a:	19 c0       	rjmp	.+50     	; 0x2ae <handleSetupOrOut>

0000027c <se0>:
; Processing of received packet (numbers in brackets are cycles after center of SE0)
;----------------------------------------------------------------------------
;This is the only non-error exit point for the software receiver loop
;we don't check any CRCs here because there is no time left.
se0:
    subi    cnt, USB_BUFSIZE    ;[5]
     27c:	3b 50       	subi	r19, 0x0B	; 11
    neg     cnt                 ;[6]
     27e:	31 95       	neg	r19
    sub     YL, cnt             ;[7]
     280:	c3 1b       	sub	r28, r19
    sbci    YH, 0               ;[8]
     282:	d0 40       	sbci	r29, 0x00	; 0
    ldi     x2, 1<<USB_INTR_PENDING_BIT ;[9]
     284:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ;[10] clear pending intr and check flag later. SE0 should be over.
     286:	1a bf       	out	0x3a, r17	; 58
    ld      token, y            ;[11]
     288:	08 81       	ld	r16, Y
    cpi     token, USBPID_DATA0 ;[13]
     28a:	03 3c       	cpi	r16, 0xC3	; 195
    breq    handleData          ;[14]
     28c:	f9 f0       	breq	.+62     	; 0x2cc <handleData>
    cpi     token, USBPID_DATA1 ;[15]
     28e:	0b 34       	cpi	r16, 0x4B	; 75
    breq    handleData          ;[16]
     290:	e9 f0       	breq	.+58     	; 0x2cc <handleData>
    lds     shift, usbDeviceAddr;[17]
     292:	20 91 91 00 	lds	r18, 0x0091
    ldd     x2, y+1             ;[19] ADDR and 1 bit endpoint number
     296:	19 81       	ldd	r17, Y+1	; 0x01
    lsl     x2                  ;[21] shift out 1 bit endpoint number
     298:	11 0f       	add	r17, r17
    cpse    x2, shift           ;[22]
     29a:	12 13       	cpse	r17, r18
    rjmp    ignorePacket        ;[23]
     29c:	ed cf       	rjmp	.-38     	; 0x278 <ignorePacket>
/* only compute endpoint number in x3 if required later */
#if USB_CFG_HAVE_INTRIN_ENDPOINT || USB_CFG_IMPLEMENT_FN_WRITEOUT
    ldd     x3, y+2             ;[24] endpoint number + crc
     29e:	4a 81       	ldd	r20, Y+2	; 0x02
    rol     x3                  ;[26] shift in LSB of endpoint
     2a0:	44 1f       	adc	r20, r20
#endif
    cpi     token, USBPID_IN    ;[27]
     2a2:	09 36       	cpi	r16, 0x69	; 105
    breq    handleIn            ;[28]
     2a4:	41 f1       	breq	.+80     	; 0x2f6 <handleIn>
    cpi     token, USBPID_SETUP ;[29]
     2a6:	0d 32       	cpi	r16, 0x2D	; 45
    breq    handleSetupOrOut    ;[30]
     2a8:	11 f0       	breq	.+4      	; 0x2ae <handleSetupOrOut>
    cpi     token, USBPID_OUT   ;[31]
     2aa:	01 3e       	cpi	r16, 0xE1	; 225
    brne    ignorePacket        ;[32] must be ack, nak or whatever
     2ac:	29 f7       	brne	.-54     	; 0x278 <ignorePacket>

000002ae <handleSetupOrOut>:
    andi    x3, 0xf             ;[32]
    breq    storeTokenAndReturn ;[33]
    mov     token, x3           ;[34] indicate that this is endpoint x OUT
#endif
storeTokenAndReturn:
    sts     usbCurrentTok, token;[35]
     2ae:	00 93 98 00 	sts	0x0098, r16

000002b2 <doReturn>:
doReturn:
    POP_STANDARD                ;[37] 12...16 cycles
     2b2:	3f 91       	pop	r19
     2b4:	4f 91       	pop	r20
     2b6:	1f 91       	pop	r17
     2b8:	0f 91       	pop	r16
     2ba:	2f 91       	pop	r18
     2bc:	df 91       	pop	r29
    USB_LOAD_PENDING(YL)        ;[49]
     2be:	ca b7       	in	r28, 0x3a	; 58
    sbrc    YL, USB_INTR_PENDING_BIT;[50] check whether data is already arriving
     2c0:	c6 fd       	sbrc	r28, 6
    rjmp    waitForJ            ;[51] save the pops and pushes -- a new interrupt is already pending
     2c2:	4f cf       	rjmp	.-354    	; 0x162 <waitForJ>

000002c4 <sofError>:
sofError:
    POP_RETI                    ;macro call
     2c4:	cf 91       	pop	r28
     2c6:	cf bf       	out	0x3f, r28	; 63
     2c8:	cf 91       	pop	r28
    reti
     2ca:	18 95       	reti

000002cc <handleData>:

handleData:
#if USB_CFG_CHECK_CRC
    CRC_CLEANUP_AND_CHECK       ; jumps to ignorePacket if CRC error
#endif
    lds     shift, usbCurrentTok;[18]
     2cc:	20 91 98 00 	lds	r18, 0x0098
    tst     shift               ;[20]
     2d0:	22 23       	and	r18, r18
    breq    doReturn            ;[21]
     2d2:	79 f3       	breq	.-34     	; 0x2b2 <doReturn>
    lds     x2, usbRxLen        ;[22]
     2d4:	10 91 96 00 	lds	r17, 0x0096
    tst     x2                  ;[24]
     2d8:	11 23       	and	r17, r17
    brne    sendNakAndReti      ;[25]
     2da:	69 f5       	brne	.+90     	; 0x336 <sendNakAndReti>
; 2006-03-11: The following two lines fix a problem where the device was not
; recognized if usbPoll() was called less frequently than once every 4 ms.
    cpi     cnt, 4              ;[26] zero sized data packets are status phase only -- ignore and ack
     2dc:	34 30       	cpi	r19, 0x04	; 4
    brmi    sendAckAndReti      ;[27] keep rx buffer clean -- we must not NAK next SETUP
     2de:	6a f1       	brmi	.+90     	; 0x33a <sendAckAndReti>
#if USB_CFG_CHECK_DATA_TOGGLING
    sts     usbCurrentDataToken, token  ; store for checking by C code
#endif
    sts     usbRxLen, cnt       ;[28] store received data, swap buffers
     2e0:	30 93 96 00 	sts	0x0096, r19
    sts     usbRxToken, shift   ;[30]
     2e4:	20 93 92 00 	sts	0x0092, r18
    lds     x2, usbInputBufOffset;[32] swap buffers
     2e8:	10 91 93 00 	lds	r17, 0x0093
    ldi     cnt, USB_BUFSIZE    ;[34]
     2ec:	3b e0       	ldi	r19, 0x0B	; 11
    sub     cnt, x2             ;[35]
     2ee:	31 1b       	sub	r19, r17
    sts     usbInputBufOffset, cnt;[36] buffers now swapped
     2f0:	30 93 93 00 	sts	0x0093, r19
    rjmp    sendAckAndReti      ;[38] 40 + 17 = 57 until SOP
     2f4:	22 c0       	rjmp	.+68     	; 0x33a <sendAckAndReti>

000002f6 <handleIn>:

handleIn:
;We don't send any data as long as the C code has not processed the current
;input data and potentially updated the output data. That's more efficient
;in terms of code size than clearing the tx buffers when a packet is received.
    lds     x1, usbRxLen        ;[30]
     2f6:	00 91 96 00 	lds	r16, 0x0096
    cpi     x1, 1               ;[32] negative values are flow control, 0 means "buffer free"
     2fa:	01 30       	cpi	r16, 0x01	; 1
    brge    sendNakAndReti      ;[33] unprocessed input packet?
     2fc:	e4 f4       	brge	.+56     	; 0x336 <sendNakAndReti>
    ldi     x1, USBPID_NAK      ;[34] prepare value for usbTxLen
     2fe:	0a e5       	ldi	r16, 0x5A	; 90
#if USB_CFG_HAVE_INTRIN_ENDPOINT
    andi    x3, 0xf             ;[35] x3 contains endpoint
     300:	4f 70       	andi	r20, 0x0F	; 15
#if USB_CFG_SUPPRESS_INTR_CODE
    brne    sendNakAndReti      ;[36]
#else
    brne    handleIn1           ;[36]
     302:	49 f4       	brne	.+18     	; 0x316 <handleIn1>
#endif
#endif
    lds     cnt, usbTxLen       ;[37]
     304:	30 91 65 00 	lds	r19, 0x0065
    sbrc    cnt, 4              ;[39] all handshake tokens have bit 4 set
     308:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[40] 42 + 16 = 58 until SOP
     30a:	19 c0       	rjmp	.+50     	; 0x33e <sendCntAndReti>
    sts     usbTxLen, x1        ;[41] x1 == USBPID_NAK from above
     30c:	00 93 65 00 	sts	0x0065, r16
    ldi     YL, lo8(usbTxBuf)   ;[43]
     310:	ca e7       	ldi	r28, 0x7A	; 122
    ldi     YH, hi8(usbTxBuf)   ;[44]
     312:	d0 e0       	ldi	r29, 0x00	; 0
    rjmp    usbSendAndReti      ;[45] 57 + 12 = 59 until SOP
     314:	18 c0       	rjmp	.+48     	; 0x346 <usbSendAndReti>

00000316 <handleIn1>:
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
; 2006-06-10 as suggested by O.Tamura: support second INTR IN / BULK IN endpoint
    cpi     x3, USB_CFG_EP3_NUMBER;[38]
    breq    handleIn3           ;[39]
#endif
    lds     cnt, usbTxLen1      ;[40]
     316:	30 91 85 00 	lds	r19, 0x0085
    sbrc    cnt, 4              ;[42] all handshake tokens have bit 4 set
     31a:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[43] 47 + 16 = 63 until SOP
     31c:	10 c0       	rjmp	.+32     	; 0x33e <sendCntAndReti>
    sts     usbTxLen1, x1       ;[44] x1 == USBPID_NAK from above
     31e:	00 93 85 00 	sts	0x0085, r16
    ldi     YL, lo8(usbTxBuf1)  ;[46]
     322:	c6 e8       	ldi	r28, 0x86	; 134
    ldi     YH, hi8(usbTxBuf1)  ;[47]
     324:	d0 e0       	ldi	r29, 0x00	; 0
    rjmp    usbSendAndReti      ;[48] 50 + 12 = 62 until SOP
     326:	0f c0       	rjmp	.+30     	; 0x346 <usbSendAndReti>

00000328 <stuffN1Delay>:
;----------------------------------------------------------------------------

txByteLoop:
txBitloop:
stuffN1Delay:                   ;     [03]
    ror     shift               ;[-5] [11] [59]
     328:	27 95       	ror	r18
    brcc    doExorN1            ;[-4]      [60]
     32a:	a8 f4       	brcc	.+42     	; 0x356 <doExorN1>
    subi    x4, 1               ;[-3]
     32c:	51 50       	subi	r21, 0x01	; 1
    brne    commonN1            ;[-2]
     32e:	a9 f4       	brne	.+42     	; 0x35a <commonN1>
    lsl     shift               ;[-1] compensate ror after rjmp stuffDelay
     330:	22 0f       	add	r18, r18
    nop                         ;[00] stuffing consists of just waiting 8 cycles
     332:	00 00       	nop
    rjmp    stuffN1Delay        ;[01] after ror, C bit is reliably clear
     334:	f9 cf       	rjmp	.-14     	; 0x328 <stuffN1Delay>

00000336 <sendNakAndReti>:

sendNakAndReti:                 ;0 [-19] 19 cycles until SOP
    ldi     x3, USBPID_NAK      ;1 [-18]
     336:	4a e5       	ldi	r20, 0x5A	; 90
    rjmp    usbSendX3           ;2 [-16]
     338:	03 c0       	rjmp	.+6      	; 0x340 <usbSendX3>

0000033a <sendAckAndReti>:
sendAckAndReti:                 ;0 [-19] 19 cycles until SOP
    ldi     x3, USBPID_ACK      ;1 [-18]
     33a:	42 ed       	ldi	r20, 0xD2	; 210
    rjmp    usbSendX3           ;2 [-16]
     33c:	01 c0       	rjmp	.+2      	; 0x340 <usbSendX3>

0000033e <sendCntAndReti>:
sendCntAndReti:                 ;0 [-17] 17 cycles until SOP
    mov     x3, cnt             ;1 [-16]
     33e:	43 2f       	mov	r20, r19

00000340 <usbSendX3>:
usbSendX3:                      ;0 [-16]
    ldi     YL, 20              ;1 [-15] 'x3' is R20
     340:	c4 e1       	ldi	r28, 0x14	; 20
    ldi     YH, 0               ;1 [-14]
     342:	d0 e0       	ldi	r29, 0x00	; 0
    ldi     cnt, 2              ;1 [-13]
     344:	32 e0       	ldi	r19, 0x02	; 2

00000346 <usbSendAndReti>:
;pointer to data in 'Y'
;number of bytes in 'cnt' -- including sync byte
;uses: x1...x2, x4, shift, cnt, Y [x1 = mirror USBOUT, x2 = USBMASK, x4 = bitstuff cnt]
;Numbers in brackets are time since first bit of sync pattern is sent (start of instruction)
usbSendAndReti:
    in      x2, USBDDR          ;[-12] 12 cycles until SOP
     346:	17 b3       	in	r17, 0x17	; 23
    ori     x2, USBMASK         ;[-11]
     348:	15 60       	ori	r17, 0x05	; 5
    sbi     USBOUT, USBMINUS    ;[-10] prepare idle state; D+ and D- must have been 0 (no pullups)
     34a:	c0 9a       	sbi	0x18, 0	; 24
    out     USBDDR, x2          ;[-8] <--- acquire bus
     34c:	17 bb       	out	0x17, r17	; 23
    in      x1, USBOUT          ;[-7] port mirror for tx loop
     34e:	08 b3       	in	r16, 0x18	; 24
    ldi     shift, 0x40         ;[-6] sync byte is first byte sent (we enter loop after ror)
     350:	20 e4       	ldi	r18, 0x40	; 64
    ldi     x2, USBMASK         ;[-5]
     352:	15 e0       	ldi	r17, 0x05	; 5
    push    x4                  ;[-4]
     354:	5f 93       	push	r21

00000356 <doExorN1>:
doExorN1:
    eor     x1, x2              ;[-2] [06] [62]
     356:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[-1] [07] [63]
     358:	56 e0       	ldi	r21, 0x06	; 6

0000035a <commonN1>:
commonN1:
stuffN2Delay:
    out     USBOUT, x1          ;[00] [08] [64] <--- set bit
     35a:	08 bb       	out	0x18, r16	; 24
    ror     shift               ;[01]
     35c:	27 95       	ror	r18
    brcc    doExorN2            ;[02]
     35e:	20 f4       	brcc	.+8      	; 0x368 <doExorN2>
    subi    x4, 1               ;[03]
     360:	51 50       	subi	r21, 0x01	; 1
    brne    commonN2            ;[04]
     362:	21 f4       	brne	.+8      	; 0x36c <commonN2>
    lsl     shift               ;[05] compensate ror after rjmp stuffDelay
     364:	22 0f       	add	r18, r18
    rjmp    stuffN2Delay        ;[06] after ror, C bit is reliably clear
     366:	f9 cf       	rjmp	.-14     	; 0x35a <commonN1>

00000368 <doExorN2>:
doExorN2:
    eor     x1, x2              ;[04] [12]
     368:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[05] [13]
     36a:	56 e0       	ldi	r21, 0x06	; 6

0000036c <commonN2>:
commonN2:
    nop                         ;[06] [14]
     36c:	00 00       	nop
    subi    cnt, 171            ;[07] [15] trick: (3 * 171) & 0xff = 1
     36e:	3b 5a       	subi	r19, 0xAB	; 171
    out     USBOUT, x1          ;[08] [16] <--- set bit
     370:	08 bb       	out	0x18, r16	; 24
    brcs    txBitloop           ;[09]      [25] [41]
     372:	d0 f2       	brcs	.-76     	; 0x328 <stuffN1Delay>

00000374 <stuff6Delay>:

stuff6Delay:
    ror     shift               ;[42] [50]
     374:	27 95       	ror	r18
    brcc    doExor6             ;[43]
     376:	28 f4       	brcc	.+10     	; 0x382 <doExor6>
    subi    x4, 1               ;[44]
     378:	51 50       	subi	r21, 0x01	; 1
    brne    common6             ;[45]
     37a:	29 f4       	brne	.+10     	; 0x386 <common6>
    lsl     shift               ;[46] compensate ror after rjmp stuffDelay
     37c:	22 0f       	add	r18, r18
    nop                         ;[47] stuffing consists of just waiting 8 cycles
     37e:	00 00       	nop
    rjmp    stuff6Delay         ;[48] after ror, C bit is reliably clear
     380:	f9 cf       	rjmp	.-14     	; 0x374 <stuff6Delay>

00000382 <doExor6>:
doExor6:
    eor     x1, x2              ;[45] [53]
     382:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[46]
     384:	56 e0       	ldi	r21, 0x06	; 6

00000386 <common6>:
common6:
stuff7Delay:
    ror     shift               ;[47] [55]
     386:	27 95       	ror	r18
    out     USBOUT, x1          ;[48] <--- set bit
     388:	08 bb       	out	0x18, r16	; 24
    brcc    doExor7             ;[49]
     38a:	20 f4       	brcc	.+8      	; 0x394 <doExor7>
    subi    x4, 1               ;[50]
     38c:	51 50       	subi	r21, 0x01	; 1
    brne    common7             ;[51]
     38e:	21 f4       	brne	.+8      	; 0x398 <common7>
    lsl     shift               ;[52] compensate ror after rjmp stuffDelay
     390:	22 0f       	add	r18, r18
    rjmp    stuff7Delay         ;[53] after ror, C bit is reliably clear
     392:	f9 cf       	rjmp	.-14     	; 0x386 <common6>

00000394 <doExor7>:
doExor7:
    eor     x1, x2              ;[51] [59]
     394:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[52]
     396:	56 e0       	ldi	r21, 0x06	; 6

00000398 <common7>:
common7:
    ld      shift, y+           ;[53]
     398:	29 91       	ld	r18, Y+
    tst     cnt                 ;[55]
     39a:	33 23       	and	r19, r19
    out     USBOUT, x1          ;[56] <--- set bit
     39c:	08 bb       	out	0x18, r16	; 24
    brne    txByteLoop          ;[57]
     39e:	21 f6       	brne	.-120    	; 0x328 <stuffN1Delay>

;make SE0:
    cbr     x1, USBMASK         ;[58] prepare SE0 [spec says EOP may be 15 to 18 cycles]
     3a0:	0a 7f       	andi	r16, 0xFA	; 250
    lds     x2, usbNewDeviceAddr;[59]
     3a2:	10 91 97 00 	lds	r17, 0x0097
    lsl     x2                  ;[61] we compare with left shifted address
     3a6:	11 0f       	add	r17, r17
    subi    YL, 2 + 20          ;[62] Only assign address on data packets, not ACK/NAK in x3
     3a8:	c6 51       	subi	r28, 0x16	; 22
    sbci    YH, 0               ;[63]
     3aa:	d0 40       	sbci	r29, 0x00	; 0
    out     USBOUT, x1          ;[00] <-- out SE0 -- from now 2 bits = 16 cycles until bus idle
     3ac:	08 bb       	out	0x18, r16	; 24
;2006-03-06: moved transfer of new address to usbDeviceAddr from C-Code to asm:
;set address only after data packet was sent, not after handshake
    breq    skipAddrAssign      ;[01]
     3ae:	11 f0       	breq	.+4      	; 0x3b4 <skipAddrAssign>
    sts     usbDeviceAddr, x2   ; if not skipped: SE0 is one cycle longer
     3b0:	10 93 91 00 	sts	0x0091, r17

000003b4 <skipAddrAssign>:
skipAddrAssign:
;end of usbDeviceAddress transfer
    ldi     x2, 1<<USB_INTR_PENDING_BIT;[03] int0 occurred during TX -- clear pending flag
     3b4:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ;[04]
     3b6:	1a bf       	out	0x3a, r17	; 58
    ori     x1, USBIDLE         ;[05]
     3b8:	01 60       	ori	r16, 0x01	; 1
    in      x2, USBDDR          ;[06]
     3ba:	17 b3       	in	r17, 0x17	; 23
    cbr     x2, USBMASK         ;[07] set both pins to input
     3bc:	1a 7f       	andi	r17, 0xFA	; 250
    mov     x3, x1              ;[08]
     3be:	40 2f       	mov	r20, r16
    cbr     x3, USBMASK         ;[09] configure no pullup on both pins
     3c0:	4a 7f       	andi	r20, 0xFA	; 250
    pop     x4                  ;[10]
     3c2:	5f 91       	pop	r21
    nop2                        ;[12]
     3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <skipAddrAssign+0x12>
    nop2                        ;[14]
     3c6:	00 c0       	rjmp	.+0      	; 0x3c8 <skipAddrAssign+0x14>
    out     USBOUT, x1          ;[16] <-- out J (idle) -- end of SE0 (EOP signal)
     3c8:	08 bb       	out	0x18, r16	; 24
    out     USBDDR, x2          ;[17] <-- release bus now
     3ca:	17 bb       	out	0x17, r17	; 23
    out     USBOUT, x3          ;[18] <-- ensure no pull-up resistors are active
     3cc:	48 bb       	out	0x18, r20	; 24
    rjmp    doReturn
     3ce:	71 cf       	rjmp	.-286    	; 0x2b2 <doReturn>

000003d0 <timerPoll>:
     3d0:	cf 93       	push	r28
     3d2:	df 93       	push	r29
     3d4:	cd b7       	in	r28, 0x3d	; 61
     3d6:	de b7       	in	r29, 0x3e	; 62
     3d8:	88 e5       	ldi	r24, 0x58	; 88
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	fc 01       	movw	r30, r24
     3de:	80 81       	ld	r24, Z
     3e0:	88 2f       	mov	r24, r24
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	84 70       	andi	r24, 0x04	; 4
     3e6:	99 27       	eor	r25, r25
     3e8:	00 97       	sbiw	r24, 0x00	; 0
     3ea:	e1 f0       	breq	.+56     	; 0x424 <timerPoll+0x54>
     3ec:	88 e5       	ldi	r24, 0x58	; 88
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	24 e0       	ldi	r18, 0x04	; 4
     3f2:	fc 01       	movw	r30, r24
     3f4:	20 83       	st	Z, r18
     3f6:	80 91 76 00 	lds	r24, 0x0076
     3fa:	90 91 77 00 	lds	r25, 0x0077
     3fe:	01 96       	adiw	r24, 0x01	; 1
     400:	90 93 77 00 	sts	0x0077, r25
     404:	80 93 76 00 	sts	0x0076, r24
     408:	80 91 76 00 	lds	r24, 0x0076
     40c:	90 91 77 00 	lds	r25, 0x0077
     410:	85 30       	cpi	r24, 0x05	; 5
     412:	91 05       	cpc	r25, r1
     414:	38 f0       	brcs	.+14     	; 0x424 <timerPoll+0x54>
     416:	10 92 77 00 	sts	0x0077, r1
     41a:	10 92 76 00 	sts	0x0076, r1
     41e:	81 e0       	ldi	r24, 0x01	; 1
     420:	80 93 64 00 	sts	0x0064, r24
     424:	df 91       	pop	r29
     426:	cf 91       	pop	r28
     428:	08 95       	ret

0000042a <buildReport>:
     42a:	cf 93       	push	r28
     42c:	df 93       	push	r29
     42e:	1f 92       	push	r1
     430:	cd b7       	in	r28, 0x3d	; 61
     432:	de b7       	in	r29, 0x3e	; 62
     434:	80 91 71 00 	lds	r24, 0x0071
     438:	88 23       	and	r24, r24
     43a:	d1 f4       	brne	.+52     	; 0x470 <buildReport+0x46>
     43c:	80 91 75 00 	lds	r24, 0x0075
     440:	81 30       	cpi	r24, 0x01	; 1
     442:	69 f4       	brne	.+26     	; 0x45e <buildReport+0x34>
     444:	80 91 63 00 	lds	r24, 0x0063
     448:	88 23       	and	r24, r24
     44a:	11 f0       	breq	.+4      	; 0x450 <buildReport+0x26>
     44c:	19 82       	std	Y+1, r1	; 0x01
     44e:	02 c0       	rjmp	.+4      	; 0x454 <buildReport+0x2a>
     450:	8a e2       	ldi	r24, 0x2A	; 42
     452:	89 83       	std	Y+1, r24	; 0x01
     454:	10 92 75 00 	sts	0x0075, r1
     458:	89 81       	ldd	r24, Y+1	; 0x01
     45a:	80 93 6d 00 	sts	0x006D, r24
     45e:	10 92 6a 00 	sts	0x006A, r1
     462:	10 92 6b 00 	sts	0x006B, r1
     466:	10 92 6c 00 	sts	0x006C, r1
     46a:	81 e0       	ldi	r24, 0x01	; 1
     46c:	80 93 71 00 	sts	0x0071, r24
     470:	0f 90       	pop	r0
     472:	df 91       	pop	r29
     474:	cf 91       	pop	r28
     476:	08 95       	ret

00000478 <checkButtonChange>:
     478:	cf 93       	push	r28
     47a:	df 93       	push	r29
     47c:	00 d0       	rcall	.+0      	; 0x47e <checkButtonChange+0x6>
     47e:	00 d0       	rcall	.+0      	; 0x480 <checkButtonChange+0x8>
     480:	cd b7       	in	r28, 0x3d	; 61
     482:	de b7       	in	r29, 0x3e	; 62
     484:	86 e3       	ldi	r24, 0x36	; 54
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	fc 01       	movw	r30, r24
     48a:	80 81       	ld	r24, Z
     48c:	82 70       	andi	r24, 0x02	; 2
     48e:	89 83       	std	Y+1, r24	; 0x01
     490:	86 e3       	ldi	r24, 0x36	; 54
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	fc 01       	movw	r30, r24
     496:	80 81       	ld	r24, Z
     498:	80 71       	andi	r24, 0x10	; 16
     49a:	8a 83       	std	Y+2, r24	; 0x02
     49c:	86 e3       	ldi	r24, 0x36	; 54
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	fc 01       	movw	r30, r24
     4a2:	80 81       	ld	r24, Z
     4a4:	80 72       	andi	r24, 0x20	; 32
     4a6:	8b 83       	std	Y+3, r24	; 0x03
     4a8:	86 e3       	ldi	r24, 0x36	; 54
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	fc 01       	movw	r30, r24
     4ae:	80 81       	ld	r24, Z
     4b0:	88 70       	andi	r24, 0x08	; 8
     4b2:	8c 83       	std	Y+4, r24	; 0x04
     4b4:	80 91 60 00 	lds	r24, 0x0060
     4b8:	99 81       	ldd	r25, Y+1	; 0x01
     4ba:	98 17       	cp	r25, r24
     4bc:	51 f0       	breq	.+20     	; 0x4d2 <checkButtonChange+0x5a>
     4be:	89 81       	ldd	r24, Y+1	; 0x01
     4c0:	80 93 60 00 	sts	0x0060, r24
     4c4:	10 92 64 00 	sts	0x0064, r1
     4c8:	10 92 71 00 	sts	0x0071, r1
     4cc:	81 e0       	ldi	r24, 0x01	; 1
     4ce:	80 93 72 00 	sts	0x0072, r24
     4d2:	80 91 61 00 	lds	r24, 0x0061
     4d6:	9a 81       	ldd	r25, Y+2	; 0x02
     4d8:	98 17       	cp	r25, r24
     4da:	51 f0       	breq	.+20     	; 0x4f0 <checkButtonChange+0x78>
     4dc:	8a 81       	ldd	r24, Y+2	; 0x02
     4de:	80 93 61 00 	sts	0x0061, r24
     4e2:	10 92 64 00 	sts	0x0064, r1
     4e6:	10 92 71 00 	sts	0x0071, r1
     4ea:	81 e0       	ldi	r24, 0x01	; 1
     4ec:	80 93 73 00 	sts	0x0073, r24
     4f0:	80 91 62 00 	lds	r24, 0x0062
     4f4:	9b 81       	ldd	r25, Y+3	; 0x03
     4f6:	98 17       	cp	r25, r24
     4f8:	51 f0       	breq	.+20     	; 0x50e <checkButtonChange+0x96>
     4fa:	8b 81       	ldd	r24, Y+3	; 0x03
     4fc:	80 93 62 00 	sts	0x0062, r24
     500:	10 92 64 00 	sts	0x0064, r1
     504:	10 92 71 00 	sts	0x0071, r1
     508:	81 e0       	ldi	r24, 0x01	; 1
     50a:	80 93 74 00 	sts	0x0074, r24
     50e:	80 91 63 00 	lds	r24, 0x0063
     512:	9c 81       	ldd	r25, Y+4	; 0x04
     514:	98 17       	cp	r25, r24
     516:	51 f0       	breq	.+20     	; 0x52c <checkButtonChange+0xb4>
     518:	8c 81       	ldd	r24, Y+4	; 0x04
     51a:	80 93 63 00 	sts	0x0063, r24
     51e:	10 92 64 00 	sts	0x0064, r1
     522:	10 92 71 00 	sts	0x0071, r1
     526:	81 e0       	ldi	r24, 0x01	; 1
     528:	80 93 75 00 	sts	0x0075, r24
     52c:	0f 90       	pop	r0
     52e:	0f 90       	pop	r0
     530:	0f 90       	pop	r0
     532:	0f 90       	pop	r0
     534:	df 91       	pop	r29
     536:	cf 91       	pop	r28
     538:	08 95       	ret

0000053a <timerInit>:
     53a:	cf 93       	push	r28
     53c:	df 93       	push	r29
     53e:	cd b7       	in	r28, 0x3d	; 61
     540:	de b7       	in	r29, 0x3e	; 62
     542:	80 e5       	ldi	r24, 0x50	; 80
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	2b e0       	ldi	r18, 0x0B	; 11
     548:	fc 01       	movw	r30, r24
     54a:	20 83       	st	Z, r18
     54c:	df 91       	pop	r29
     54e:	cf 91       	pop	r28
     550:	08 95       	ret

00000552 <usbFunctionSetup>:
     552:	cf 93       	push	r28
     554:	df 93       	push	r29
     556:	00 d0       	rcall	.+0      	; 0x558 <usbFunctionSetup+0x6>
     558:	00 d0       	rcall	.+0      	; 0x55a <usbFunctionSetup+0x8>
     55a:	cd b7       	in	r28, 0x3d	; 61
     55c:	de b7       	in	r29, 0x3e	; 62
     55e:	9c 83       	std	Y+4, r25	; 0x04
     560:	8b 83       	std	Y+3, r24	; 0x03
     562:	8b 81       	ldd	r24, Y+3	; 0x03
     564:	9c 81       	ldd	r25, Y+4	; 0x04
     566:	9a 83       	std	Y+2, r25	; 0x02
     568:	89 83       	std	Y+1, r24	; 0x01
     56a:	88 e6       	ldi	r24, 0x68	; 104
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	90 93 95 00 	sts	0x0095, r25
     572:	80 93 94 00 	sts	0x0094, r24
     576:	89 81       	ldd	r24, Y+1	; 0x01
     578:	9a 81       	ldd	r25, Y+2	; 0x02
     57a:	fc 01       	movw	r30, r24
     57c:	80 81       	ld	r24, Z
     57e:	88 2f       	mov	r24, r24
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	80 76       	andi	r24, 0x60	; 96
     584:	99 27       	eor	r25, r25
     586:	80 32       	cpi	r24, 0x20	; 32
     588:	91 05       	cpc	r25, r1
     58a:	19 f5       	brne	.+70     	; 0x5d2 <usbFunctionSetup+0x80>
     58c:	89 81       	ldd	r24, Y+1	; 0x01
     58e:	9a 81       	ldd	r25, Y+2	; 0x02
     590:	fc 01       	movw	r30, r24
     592:	81 81       	ldd	r24, Z+1	; 0x01
     594:	81 30       	cpi	r24, 0x01	; 1
     596:	19 f4       	brne	.+6      	; 0x59e <usbFunctionSetup+0x4c>
     598:	48 df       	rcall	.-368    	; 0x42a <buildReport>
     59a:	88 e0       	ldi	r24, 0x08	; 8
     59c:	1b c0       	rjmp	.+54     	; 0x5d4 <usbFunctionSetup+0x82>
     59e:	89 81       	ldd	r24, Y+1	; 0x01
     5a0:	9a 81       	ldd	r25, Y+2	; 0x02
     5a2:	fc 01       	movw	r30, r24
     5a4:	81 81       	ldd	r24, Z+1	; 0x01
     5a6:	82 30       	cpi	r24, 0x02	; 2
     5a8:	41 f4       	brne	.+16     	; 0x5ba <usbFunctionSetup+0x68>
     5aa:	80 e7       	ldi	r24, 0x70	; 112
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	90 93 95 00 	sts	0x0095, r25
     5b2:	80 93 94 00 	sts	0x0094, r24
     5b6:	81 e0       	ldi	r24, 0x01	; 1
     5b8:	0d c0       	rjmp	.+26     	; 0x5d4 <usbFunctionSetup+0x82>
     5ba:	89 81       	ldd	r24, Y+1	; 0x01
     5bc:	9a 81       	ldd	r25, Y+2	; 0x02
     5be:	fc 01       	movw	r30, r24
     5c0:	81 81       	ldd	r24, Z+1	; 0x01
     5c2:	8a 30       	cpi	r24, 0x0A	; 10
     5c4:	31 f4       	brne	.+12     	; 0x5d2 <usbFunctionSetup+0x80>
     5c6:	89 81       	ldd	r24, Y+1	; 0x01
     5c8:	9a 81       	ldd	r25, Y+2	; 0x02
     5ca:	fc 01       	movw	r30, r24
     5cc:	83 81       	ldd	r24, Z+3	; 0x03
     5ce:	80 93 70 00 	sts	0x0070, r24
     5d2:	80 e0       	ldi	r24, 0x00	; 0
     5d4:	0f 90       	pop	r0
     5d6:	0f 90       	pop	r0
     5d8:	0f 90       	pop	r0
     5da:	0f 90       	pop	r0
     5dc:	df 91       	pop	r29
     5de:	cf 91       	pop	r28
     5e0:	08 95       	ret

000005e2 <calibrateOscillator>:
     5e2:	cf 93       	push	r28
     5e4:	df 93       	push	r29
     5e6:	cd b7       	in	r28, 0x3d	; 61
     5e8:	de b7       	in	r29, 0x3e	; 62
     5ea:	29 97       	sbiw	r28, 0x09	; 9
     5ec:	0f b6       	in	r0, 0x3f	; 63
     5ee:	f8 94       	cli
     5f0:	de bf       	out	0x3e, r29	; 62
     5f2:	0f be       	out	0x3f, r0	; 63
     5f4:	cd bf       	out	0x3d, r28	; 61
     5f6:	80 e8       	ldi	r24, 0x80	; 128
     5f8:	89 83       	std	Y+1, r24	; 0x01
     5fa:	1a 82       	std	Y+2, r1	; 0x02
     5fc:	81 eb       	ldi	r24, 0xB1	; 177
     5fe:	96 e0       	ldi	r25, 0x06	; 6
     600:	99 87       	std	Y+9, r25	; 0x09
     602:	88 87       	std	Y+8, r24	; 0x08
     604:	81 e5       	ldi	r24, 0x51	; 81
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	3a 81       	ldd	r19, Y+2	; 0x02
     60a:	29 81       	ldd	r18, Y+1	; 0x01
     60c:	23 0f       	add	r18, r19
     60e:	fc 01       	movw	r30, r24
     610:	20 83       	st	Z, r18
     612:	91 dd       	rcall	.-1246   	; 0x136 <usbMeasureFrameLength>
     614:	9d 83       	std	Y+5, r25	; 0x05
     616:	8c 83       	std	Y+4, r24	; 0x04
     618:	2c 81       	ldd	r18, Y+4	; 0x04
     61a:	3d 81       	ldd	r19, Y+5	; 0x05
     61c:	88 85       	ldd	r24, Y+8	; 0x08
     61e:	99 85       	ldd	r25, Y+9	; 0x09
     620:	28 17       	cp	r18, r24
     622:	39 07       	cpc	r19, r25
     624:	24 f4       	brge	.+8      	; 0x62e <calibrateOscillator+0x4c>
     626:	9a 81       	ldd	r25, Y+2	; 0x02
     628:	89 81       	ldd	r24, Y+1	; 0x01
     62a:	89 0f       	add	r24, r25
     62c:	8a 83       	std	Y+2, r24	; 0x02
     62e:	89 81       	ldd	r24, Y+1	; 0x01
     630:	86 95       	lsr	r24
     632:	89 83       	std	Y+1, r24	; 0x01
     634:	89 81       	ldd	r24, Y+1	; 0x01
     636:	88 23       	and	r24, r24
     638:	29 f7       	brne	.-54     	; 0x604 <calibrateOscillator+0x22>
     63a:	8a 81       	ldd	r24, Y+2	; 0x02
     63c:	8b 83       	std	Y+3, r24	; 0x03
     63e:	8c 81       	ldd	r24, Y+4	; 0x04
     640:	9d 81       	ldd	r25, Y+5	; 0x05
     642:	9f 83       	std	Y+7, r25	; 0x07
     644:	8e 83       	std	Y+6, r24	; 0x06
     646:	81 e5       	ldi	r24, 0x51	; 81
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	2a 81       	ldd	r18, Y+2	; 0x02
     64c:	21 50       	subi	r18, 0x01	; 1
     64e:	fc 01       	movw	r30, r24
     650:	20 83       	st	Z, r18
     652:	2c c0       	rjmp	.+88     	; 0x6ac <calibrateOscillator+0xca>
     654:	70 dd       	rcall	.-1312   	; 0x136 <usbMeasureFrameLength>
     656:	9c 01       	movw	r18, r24
     658:	88 85       	ldd	r24, Y+8	; 0x08
     65a:	99 85       	ldd	r25, Y+9	; 0x09
     65c:	a9 01       	movw	r20, r18
     65e:	48 1b       	sub	r20, r24
     660:	59 0b       	sbc	r21, r25
     662:	ca 01       	movw	r24, r20
     664:	9d 83       	std	Y+5, r25	; 0x05
     666:	8c 83       	std	Y+4, r24	; 0x04
     668:	8c 81       	ldd	r24, Y+4	; 0x04
     66a:	9d 81       	ldd	r25, Y+5	; 0x05
     66c:	99 23       	and	r25, r25
     66e:	3c f4       	brge	.+14     	; 0x67e <calibrateOscillator+0x9c>
     670:	8c 81       	ldd	r24, Y+4	; 0x04
     672:	9d 81       	ldd	r25, Y+5	; 0x05
     674:	91 95       	neg	r25
     676:	81 95       	neg	r24
     678:	91 09       	sbc	r25, r1
     67a:	9d 83       	std	Y+5, r25	; 0x05
     67c:	8c 83       	std	Y+4, r24	; 0x04
     67e:	2c 81       	ldd	r18, Y+4	; 0x04
     680:	3d 81       	ldd	r19, Y+5	; 0x05
     682:	8e 81       	ldd	r24, Y+6	; 0x06
     684:	9f 81       	ldd	r25, Y+7	; 0x07
     686:	28 17       	cp	r18, r24
     688:	39 07       	cpc	r19, r25
     68a:	4c f4       	brge	.+18     	; 0x69e <calibrateOscillator+0xbc>
     68c:	8c 81       	ldd	r24, Y+4	; 0x04
     68e:	9d 81       	ldd	r25, Y+5	; 0x05
     690:	9f 83       	std	Y+7, r25	; 0x07
     692:	8e 83       	std	Y+6, r24	; 0x06
     694:	81 e5       	ldi	r24, 0x51	; 81
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	fc 01       	movw	r30, r24
     69a:	80 81       	ld	r24, Z
     69c:	8b 83       	std	Y+3, r24	; 0x03
     69e:	81 e5       	ldi	r24, 0x51	; 81
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	fc 01       	movw	r30, r24
     6a4:	20 81       	ld	r18, Z
     6a6:	2f 5f       	subi	r18, 0xFF	; 255
     6a8:	fc 01       	movw	r30, r24
     6aa:	20 83       	st	Z, r18
     6ac:	81 e5       	ldi	r24, 0x51	; 81
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	fc 01       	movw	r30, r24
     6b2:	80 81       	ld	r24, Z
     6b4:	28 2f       	mov	r18, r24
     6b6:	30 e0       	ldi	r19, 0x00	; 0
     6b8:	8a 81       	ldd	r24, Y+2	; 0x02
     6ba:	88 2f       	mov	r24, r24
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	01 96       	adiw	r24, 0x01	; 1
     6c0:	82 17       	cp	r24, r18
     6c2:	93 07       	cpc	r25, r19
     6c4:	3c f6       	brge	.-114    	; 0x654 <calibrateOscillator+0x72>
     6c6:	81 e5       	ldi	r24, 0x51	; 81
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	2b 81       	ldd	r18, Y+3	; 0x03
     6cc:	fc 01       	movw	r30, r24
     6ce:	20 83       	st	Z, r18
     6d0:	29 96       	adiw	r28, 0x09	; 9
     6d2:	0f b6       	in	r0, 0x3f	; 63
     6d4:	f8 94       	cli
     6d6:	de bf       	out	0x3e, r29	; 62
     6d8:	0f be       	out	0x3f, r0	; 63
     6da:	cd bf       	out	0x3d, r28	; 61
     6dc:	df 91       	pop	r29
     6de:	cf 91       	pop	r28
     6e0:	08 95       	ret

000006e2 <hadUsbReset>:
     6e2:	cf 93       	push	r28
     6e4:	df 93       	push	r29
     6e6:	cd b7       	in	r28, 0x3d	; 61
     6e8:	de b7       	in	r29, 0x3e	; 62
     6ea:	7b df       	rcall	.-266    	; 0x5e2 <calibrateOscillator>
     6ec:	81 e5       	ldi	r24, 0x51	; 81
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	fc 01       	movw	r30, r24
     6f2:	80 81       	ld	r24, Z
     6f4:	68 2f       	mov	r22, r24
     6f6:	80 e0       	ldi	r24, 0x00	; 0
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	f8 d4       	rcall	.+2544   	; 0x10ec <__eewr_byte_tn85>
     6fc:	df 91       	pop	r29
     6fe:	cf 91       	pop	r28
     700:	08 95       	ret

00000702 <main>:
     702:	cf 93       	push	r28
     704:	df 93       	push	r29
     706:	cd b7       	in	r28, 0x3d	; 61
     708:	de b7       	in	r29, 0x3e	; 62
     70a:	60 97       	sbiw	r28, 0x10	; 16
     70c:	0f b6       	in	r0, 0x3f	; 63
     70e:	f8 94       	cli
     710:	de bf       	out	0x3e, r29	; 62
     712:	0f be       	out	0x3f, r0	; 63
     714:	cd bf       	out	0x3d, r28	; 61
     716:	8c e3       	ldi	r24, 0x3C	; 60
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	fc 01       	movw	r30, r24
     71c:	80 81       	ld	r24, Z
     71e:	88 2f       	mov	r24, r24
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	82 70       	andi	r24, 0x02	; 2
     724:	99 27       	eor	r25, r25
     726:	00 97       	sbiw	r24, 0x00	; 0
     728:	b1 f7       	brne	.-20     	; 0x716 <main+0x14>
     72a:	80 e0       	ldi	r24, 0x00	; 0
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	d6 d4       	rcall	.+2476   	; 0x10dc <__eerd_byte_tn85>
     730:	8a 83       	std	Y+2, r24	; 0x02
     732:	8a 81       	ldd	r24, Y+2	; 0x02
     734:	8f 3f       	cpi	r24, 0xFF	; 255
     736:	29 f0       	breq	.+10     	; 0x742 <main+0x40>
     738:	81 e5       	ldi	r24, 0x51	; 81
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	2a 81       	ldd	r18, Y+2	; 0x02
     73e:	fc 01       	movw	r30, r24
     740:	20 83       	st	Z, r18
     742:	9b d3       	rcall	.+1846   	; 0xe7a <usbInit>
     744:	87 e3       	ldi	r24, 0x37	; 55
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	27 e3       	ldi	r18, 0x37	; 55
     74a:	30 e0       	ldi	r19, 0x00	; 0
     74c:	f9 01       	movw	r30, r18
     74e:	20 81       	ld	r18, Z
     750:	21 60       	ori	r18, 0x01	; 1
     752:	fc 01       	movw	r30, r24
     754:	20 83       	st	Z, r18
     756:	19 82       	std	Y+1, r1	; 0x01
     758:	6d c0       	rjmp	.+218    	; 0x834 <main+0x132>
     75a:	a8 95       	wdr
     75c:	80 e0       	ldi	r24, 0x00	; 0
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	a0 e8       	ldi	r26, 0x80	; 128
     762:	bf e3       	ldi	r27, 0x3F	; 63
     764:	8b 83       	std	Y+3, r24	; 0x03
     766:	9c 83       	std	Y+4, r25	; 0x04
     768:	ad 83       	std	Y+5, r26	; 0x05
     76a:	be 83       	std	Y+6, r27	; 0x06
     76c:	20 e0       	ldi	r18, 0x00	; 0
     76e:	30 e8       	ldi	r19, 0x80	; 128
     770:	4b e3       	ldi	r20, 0x3B	; 59
     772:	55 e4       	ldi	r21, 0x45	; 69
     774:	6b 81       	ldd	r22, Y+3	; 0x03
     776:	7c 81       	ldd	r23, Y+4	; 0x04
     778:	8d 81       	ldd	r24, Y+5	; 0x05
     77a:	9e 81       	ldd	r25, Y+6	; 0x06
     77c:	1c d4       	rcall	.+2104   	; 0xfb6 <__mulsf3>
     77e:	dc 01       	movw	r26, r24
     780:	cb 01       	movw	r24, r22
     782:	8f 83       	std	Y+7, r24	; 0x07
     784:	98 87       	std	Y+8, r25	; 0x08
     786:	a9 87       	std	Y+9, r26	; 0x09
     788:	ba 87       	std	Y+10, r27	; 0x0a
     78a:	20 e0       	ldi	r18, 0x00	; 0
     78c:	30 e0       	ldi	r19, 0x00	; 0
     78e:	40 e8       	ldi	r20, 0x80	; 128
     790:	5f e3       	ldi	r21, 0x3F	; 63
     792:	6f 81       	ldd	r22, Y+7	; 0x07
     794:	78 85       	ldd	r23, Y+8	; 0x08
     796:	89 85       	ldd	r24, Y+9	; 0x09
     798:	9a 85       	ldd	r25, Y+10	; 0x0a
     79a:	8c d3       	rcall	.+1816   	; 0xeb4 <__cmpsf2>
     79c:	88 23       	and	r24, r24
     79e:	2c f4       	brge	.+10     	; 0x7aa <main+0xa8>
     7a0:	81 e0       	ldi	r24, 0x01	; 1
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	9c 87       	std	Y+12, r25	; 0x0c
     7a6:	8b 87       	std	Y+11, r24	; 0x0b
     7a8:	3b c0       	rjmp	.+118    	; 0x820 <main+0x11e>
     7aa:	20 e0       	ldi	r18, 0x00	; 0
     7ac:	3f ef       	ldi	r19, 0xFF	; 255
     7ae:	4f e7       	ldi	r20, 0x7F	; 127
     7b0:	57 e4       	ldi	r21, 0x47	; 71
     7b2:	6f 81       	ldd	r22, Y+7	; 0x07
     7b4:	78 85       	ldd	r23, Y+8	; 0x08
     7b6:	89 85       	ldd	r24, Y+9	; 0x09
     7b8:	9a 85       	ldd	r25, Y+10	; 0x0a
     7ba:	f9 d3       	rcall	.+2034   	; 0xfae <__gesf2>
     7bc:	18 16       	cp	r1, r24
     7be:	3c f5       	brge	.+78     	; 0x80e <main+0x10c>
     7c0:	20 e0       	ldi	r18, 0x00	; 0
     7c2:	30 e0       	ldi	r19, 0x00	; 0
     7c4:	40 e2       	ldi	r20, 0x20	; 32
     7c6:	51 e4       	ldi	r21, 0x41	; 65
     7c8:	6b 81       	ldd	r22, Y+3	; 0x03
     7ca:	7c 81       	ldd	r23, Y+4	; 0x04
     7cc:	8d 81       	ldd	r24, Y+5	; 0x05
     7ce:	9e 81       	ldd	r25, Y+6	; 0x06
     7d0:	f2 d3       	rcall	.+2020   	; 0xfb6 <__mulsf3>
     7d2:	dc 01       	movw	r26, r24
     7d4:	cb 01       	movw	r24, r22
     7d6:	bc 01       	movw	r22, r24
     7d8:	cd 01       	movw	r24, r26
     7da:	70 d3       	rcall	.+1760   	; 0xebc <__fixunssfsi>
     7dc:	dc 01       	movw	r26, r24
     7de:	cb 01       	movw	r24, r22
     7e0:	9c 87       	std	Y+12, r25	; 0x0c
     7e2:	8b 87       	std	Y+11, r24	; 0x0b
     7e4:	0f c0       	rjmp	.+30     	; 0x804 <main+0x102>
     7e6:	8c e2       	ldi	r24, 0x2C	; 44
     7e8:	91 e0       	ldi	r25, 0x01	; 1
     7ea:	9e 87       	std	Y+14, r25	; 0x0e
     7ec:	8d 87       	std	Y+13, r24	; 0x0d
     7ee:	8d 85       	ldd	r24, Y+13	; 0x0d
     7f0:	9e 85       	ldd	r25, Y+14	; 0x0e
     7f2:	01 97       	sbiw	r24, 0x01	; 1
     7f4:	f1 f7       	brne	.-4      	; 0x7f2 <main+0xf0>
     7f6:	9e 87       	std	Y+14, r25	; 0x0e
     7f8:	8d 87       	std	Y+13, r24	; 0x0d
     7fa:	8b 85       	ldd	r24, Y+11	; 0x0b
     7fc:	9c 85       	ldd	r25, Y+12	; 0x0c
     7fe:	01 97       	sbiw	r24, 0x01	; 1
     800:	9c 87       	std	Y+12, r25	; 0x0c
     802:	8b 87       	std	Y+11, r24	; 0x0b
     804:	8b 85       	ldd	r24, Y+11	; 0x0b
     806:	9c 85       	ldd	r25, Y+12	; 0x0c
     808:	00 97       	sbiw	r24, 0x00	; 0
     80a:	69 f7       	brne	.-38     	; 0x7e6 <main+0xe4>
     80c:	13 c0       	rjmp	.+38     	; 0x834 <main+0x132>
     80e:	6f 81       	ldd	r22, Y+7	; 0x07
     810:	78 85       	ldd	r23, Y+8	; 0x08
     812:	89 85       	ldd	r24, Y+9	; 0x09
     814:	9a 85       	ldd	r25, Y+10	; 0x0a
     816:	52 d3       	rcall	.+1700   	; 0xebc <__fixunssfsi>
     818:	dc 01       	movw	r26, r24
     81a:	cb 01       	movw	r24, r22
     81c:	9c 87       	std	Y+12, r25	; 0x0c
     81e:	8b 87       	std	Y+11, r24	; 0x0b
     820:	8b 85       	ldd	r24, Y+11	; 0x0b
     822:	9c 85       	ldd	r25, Y+12	; 0x0c
     824:	98 8b       	std	Y+16, r25	; 0x10
     826:	8f 87       	std	Y+15, r24	; 0x0f
     828:	8f 85       	ldd	r24, Y+15	; 0x0f
     82a:	98 89       	ldd	r25, Y+16	; 0x10
     82c:	01 97       	sbiw	r24, 0x01	; 1
     82e:	f1 f7       	brne	.-4      	; 0x82c <main+0x12a>
     830:	98 8b       	std	Y+16, r25	; 0x10
     832:	8f 87       	std	Y+15, r24	; 0x0f
     834:	89 81       	ldd	r24, Y+1	; 0x01
     836:	81 50       	subi	r24, 0x01	; 1
     838:	89 83       	std	Y+1, r24	; 0x01
     83a:	89 81       	ldd	r24, Y+1	; 0x01
     83c:	88 23       	and	r24, r24
     83e:	09 f0       	breq	.+2      	; 0x842 <main+0x140>
     840:	8c cf       	rjmp	.-232    	; 0x75a <main+0x58>
     842:	87 e3       	ldi	r24, 0x37	; 55
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	27 e3       	ldi	r18, 0x37	; 55
     848:	30 e0       	ldi	r19, 0x00	; 0
     84a:	f9 01       	movw	r30, r18
     84c:	20 81       	ld	r18, Z
     84e:	2e 7f       	andi	r18, 0xFE	; 254
     850:	fc 01       	movw	r30, r24
     852:	20 83       	st	Z, r18
     854:	88 e1       	ldi	r24, 0x18	; 24
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	2f e0       	ldi	r18, 0x0F	; 15
     85a:	0f b6       	in	r0, 0x3f	; 63
     85c:	f8 94       	cli
     85e:	a8 95       	wdr
     860:	81 bd       	out	0x21, r24	; 33
     862:	0f be       	out	0x3f, r0	; 63
     864:	21 bd       	out	0x21, r18	; 33
     866:	88 e3       	ldi	r24, 0x38	; 56
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	28 e3       	ldi	r18, 0x38	; 56
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	f9 01       	movw	r30, r18
     870:	20 81       	ld	r18, Z
     872:	22 60       	ori	r18, 0x02	; 2
     874:	fc 01       	movw	r30, r24
     876:	20 83       	st	Z, r18
     878:	88 e3       	ldi	r24, 0x38	; 56
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	28 e3       	ldi	r18, 0x38	; 56
     87e:	30 e0       	ldi	r19, 0x00	; 0
     880:	f9 01       	movw	r30, r18
     882:	20 81       	ld	r18, Z
     884:	20 61       	ori	r18, 0x10	; 16
     886:	fc 01       	movw	r30, r24
     888:	20 83       	st	Z, r18
     88a:	88 e3       	ldi	r24, 0x38	; 56
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	28 e3       	ldi	r18, 0x38	; 56
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	f9 01       	movw	r30, r18
     894:	20 81       	ld	r18, Z
     896:	20 62       	ori	r18, 0x20	; 32
     898:	fc 01       	movw	r30, r24
     89a:	20 83       	st	Z, r18
     89c:	88 e3       	ldi	r24, 0x38	; 56
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	28 e3       	ldi	r18, 0x38	; 56
     8a2:	30 e0       	ldi	r19, 0x00	; 0
     8a4:	f9 01       	movw	r30, r18
     8a6:	20 81       	ld	r18, Z
     8a8:	28 60       	ori	r18, 0x08	; 8
     8aa:	fc 01       	movw	r30, r24
     8ac:	20 83       	st	Z, r18
     8ae:	45 de       	rcall	.-886    	; 0x53a <timerInit>
     8b0:	78 94       	sei
     8b2:	a8 95       	wdr
     8b4:	97 d2       	rcall	.+1326   	; 0xde4 <usbPoll>
     8b6:	80 91 64 00 	lds	r24, 0x0064
     8ba:	81 30       	cpi	r24, 0x01	; 1
     8bc:	09 f4       	brne	.+2      	; 0x8c0 <main+0x1be>
     8be:	dc dd       	rcall	.-1096   	; 0x478 <checkButtonChange>
     8c0:	80 91 85 00 	lds	r24, 0x0085
     8c4:	88 2f       	mov	r24, r24
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	80 71       	andi	r24, 0x10	; 16
     8ca:	99 27       	eor	r25, r25
     8cc:	00 97       	sbiw	r24, 0x00	; 0
     8ce:	49 f0       	breq	.+18     	; 0x8e2 <main+0x1e0>
     8d0:	80 91 71 00 	lds	r24, 0x0071
     8d4:	88 23       	and	r24, r24
     8d6:	29 f4       	brne	.+10     	; 0x8e2 <main+0x1e0>
     8d8:	a8 dd       	rcall	.-1200   	; 0x42a <buildReport>
     8da:	68 e0       	ldi	r22, 0x08	; 8
     8dc:	88 e6       	ldi	r24, 0x68	; 104
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	71 d0       	rcall	.+226    	; 0x9c4 <usbSetInterrupt>
     8e2:	76 dd       	rcall	.-1300   	; 0x3d0 <timerPoll>
     8e4:	e6 cf       	rjmp	.-52     	; 0x8b2 <main+0x1b0>

000008e6 <usbResetDataToggling>:
     8e6:	cf 93       	push	r28
     8e8:	df 93       	push	r29
     8ea:	cd b7       	in	r28, 0x3d	; 61
     8ec:	de b7       	in	r29, 0x3e	; 62
     8ee:	8b e4       	ldi	r24, 0x4B	; 75
     8f0:	80 93 86 00 	sts	0x0086, r24
     8f4:	df 91       	pop	r29
     8f6:	cf 91       	pop	r28
     8f8:	08 95       	ret

000008fa <usbResetStall>:
     8fa:	cf 93       	push	r28
     8fc:	df 93       	push	r29
     8fe:	cd b7       	in	r28, 0x3d	; 61
     900:	de b7       	in	r29, 0x3e	; 62
     902:	df 91       	pop	r29
     904:	cf 91       	pop	r28
     906:	08 95       	ret

00000908 <usbGenericSetInterrupt>:
     908:	cf 93       	push	r28
     90a:	df 93       	push	r29
     90c:	cd b7       	in	r28, 0x3d	; 61
     90e:	de b7       	in	r29, 0x3e	; 62
     910:	28 97       	sbiw	r28, 0x08	; 8
     912:	0f b6       	in	r0, 0x3f	; 63
     914:	f8 94       	cli
     916:	de bf       	out	0x3e, r29	; 62
     918:	0f be       	out	0x3f, r0	; 63
     91a:	cd bf       	out	0x3d, r28	; 61
     91c:	9d 83       	std	Y+5, r25	; 0x05
     91e:	8c 83       	std	Y+4, r24	; 0x04
     920:	6e 83       	std	Y+6, r22	; 0x06
     922:	58 87       	std	Y+8, r21	; 0x08
     924:	4f 83       	std	Y+7, r20	; 0x07
     926:	8f 81       	ldd	r24, Y+7	; 0x07
     928:	98 85       	ldd	r25, Y+8	; 0x08
     92a:	fc 01       	movw	r30, r24
     92c:	80 81       	ld	r24, Z
     92e:	88 2f       	mov	r24, r24
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	80 71       	andi	r24, 0x10	; 16
     934:	99 27       	eor	r25, r25
     936:	00 97       	sbiw	r24, 0x00	; 0
     938:	61 f0       	breq	.+24     	; 0x952 <usbGenericSetInterrupt+0x4a>
     93a:	8f 81       	ldd	r24, Y+7	; 0x07
     93c:	98 85       	ldd	r25, Y+8	; 0x08
     93e:	fc 01       	movw	r30, r24
     940:	91 81       	ldd	r25, Z+1	; 0x01
     942:	88 e8       	ldi	r24, 0x88	; 136
     944:	29 2f       	mov	r18, r25
     946:	28 27       	eor	r18, r24
     948:	8f 81       	ldd	r24, Y+7	; 0x07
     94a:	98 85       	ldd	r25, Y+8	; 0x08
     94c:	fc 01       	movw	r30, r24
     94e:	21 83       	std	Z+1, r18	; 0x01
     950:	05 c0       	rjmp	.+10     	; 0x95c <usbGenericSetInterrupt+0x54>
     952:	8f 81       	ldd	r24, Y+7	; 0x07
     954:	98 85       	ldd	r25, Y+8	; 0x08
     956:	2a e5       	ldi	r18, 0x5A	; 90
     958:	fc 01       	movw	r30, r24
     95a:	20 83       	st	Z, r18
     95c:	8f 81       	ldd	r24, Y+7	; 0x07
     95e:	98 85       	ldd	r25, Y+8	; 0x08
     960:	02 96       	adiw	r24, 0x02	; 2
     962:	9a 83       	std	Y+2, r25	; 0x02
     964:	89 83       	std	Y+1, r24	; 0x01
     966:	8e 81       	ldd	r24, Y+6	; 0x06
     968:	8b 83       	std	Y+3, r24	; 0x03
     96a:	89 81       	ldd	r24, Y+1	; 0x01
     96c:	9a 81       	ldd	r25, Y+2	; 0x02
     96e:	9c 01       	movw	r18, r24
     970:	2f 5f       	subi	r18, 0xFF	; 255
     972:	3f 4f       	sbci	r19, 0xFF	; 255
     974:	3a 83       	std	Y+2, r19	; 0x02
     976:	29 83       	std	Y+1, r18	; 0x01
     978:	2c 81       	ldd	r18, Y+4	; 0x04
     97a:	3d 81       	ldd	r19, Y+5	; 0x05
     97c:	a9 01       	movw	r20, r18
     97e:	4f 5f       	subi	r20, 0xFF	; 255
     980:	5f 4f       	sbci	r21, 0xFF	; 255
     982:	5d 83       	std	Y+5, r21	; 0x05
     984:	4c 83       	std	Y+4, r20	; 0x04
     986:	f9 01       	movw	r30, r18
     988:	20 81       	ld	r18, Z
     98a:	fc 01       	movw	r30, r24
     98c:	20 83       	st	Z, r18
     98e:	8b 81       	ldd	r24, Y+3	; 0x03
     990:	81 50       	subi	r24, 0x01	; 1
     992:	8b 83       	std	Y+3, r24	; 0x03
     994:	8b 81       	ldd	r24, Y+3	; 0x03
     996:	88 23       	and	r24, r24
     998:	41 f7       	brne	.-48     	; 0x96a <usbGenericSetInterrupt+0x62>
     99a:	8f 81       	ldd	r24, Y+7	; 0x07
     99c:	98 85       	ldd	r25, Y+8	; 0x08
     99e:	02 96       	adiw	r24, 0x02	; 2
     9a0:	6e 81       	ldd	r22, Y+6	; 0x06
     9a2:	c5 db       	rcall	.-2166   	; 0x12e <usbCrc16Append>
     9a4:	8e 81       	ldd	r24, Y+6	; 0x06
     9a6:	24 e0       	ldi	r18, 0x04	; 4
     9a8:	28 0f       	add	r18, r24
     9aa:	8f 81       	ldd	r24, Y+7	; 0x07
     9ac:	98 85       	ldd	r25, Y+8	; 0x08
     9ae:	fc 01       	movw	r30, r24
     9b0:	20 83       	st	Z, r18
     9b2:	28 96       	adiw	r28, 0x08	; 8
     9b4:	0f b6       	in	r0, 0x3f	; 63
     9b6:	f8 94       	cli
     9b8:	de bf       	out	0x3e, r29	; 62
     9ba:	0f be       	out	0x3f, r0	; 63
     9bc:	cd bf       	out	0x3d, r28	; 61
     9be:	df 91       	pop	r29
     9c0:	cf 91       	pop	r28
     9c2:	08 95       	ret

000009c4 <usbSetInterrupt>:
     9c4:	cf 93       	push	r28
     9c6:	df 93       	push	r29
     9c8:	00 d0       	rcall	.+0      	; 0x9ca <usbSetInterrupt+0x6>
     9ca:	1f 92       	push	r1
     9cc:	cd b7       	in	r28, 0x3d	; 61
     9ce:	de b7       	in	r29, 0x3e	; 62
     9d0:	9a 83       	std	Y+2, r25	; 0x02
     9d2:	89 83       	std	Y+1, r24	; 0x01
     9d4:	6b 83       	std	Y+3, r22	; 0x03
     9d6:	89 81       	ldd	r24, Y+1	; 0x01
     9d8:	9a 81       	ldd	r25, Y+2	; 0x02
     9da:	45 e8       	ldi	r20, 0x85	; 133
     9dc:	50 e0       	ldi	r21, 0x00	; 0
     9de:	6b 81       	ldd	r22, Y+3	; 0x03
     9e0:	93 df       	rcall	.-218    	; 0x908 <usbGenericSetInterrupt>
     9e2:	0f 90       	pop	r0
     9e4:	0f 90       	pop	r0
     9e6:	0f 90       	pop	r0
     9e8:	df 91       	pop	r29
     9ea:	cf 91       	pop	r28
     9ec:	08 95       	ret

000009ee <usbDriverDescriptor>:
     9ee:	cf 93       	push	r28
     9f0:	df 93       	push	r29
     9f2:	00 d0       	rcall	.+0      	; 0x9f4 <usbDriverDescriptor+0x6>
     9f4:	00 d0       	rcall	.+0      	; 0x9f6 <usbDriverDescriptor+0x8>
     9f6:	00 d0       	rcall	.+0      	; 0x9f8 <usbDriverDescriptor+0xa>
     9f8:	cd b7       	in	r28, 0x3d	; 61
     9fa:	de b7       	in	r29, 0x3e	; 62
     9fc:	9e 83       	std	Y+6, r25	; 0x06
     9fe:	8d 83       	std	Y+5, r24	; 0x05
     a00:	19 82       	std	Y+1, r1	; 0x01
     a02:	80 e4       	ldi	r24, 0x40	; 64
     a04:	8a 83       	std	Y+2, r24	; 0x02
     a06:	8d 81       	ldd	r24, Y+5	; 0x05
     a08:	9e 81       	ldd	r25, Y+6	; 0x06
     a0a:	fc 01       	movw	r30, r24
     a0c:	83 81       	ldd	r24, Z+3	; 0x03
     a0e:	8b 83       	std	Y+3, r24	; 0x03
     a10:	8b 81       	ldd	r24, Y+3	; 0x03
     a12:	81 30       	cpi	r24, 0x01	; 1
     a14:	49 f4       	brne	.+18     	; 0xa28 <usbDriverDescriptor+0x3a>
     a16:	82 e1       	ldi	r24, 0x12	; 18
     a18:	89 83       	std	Y+1, r24	; 0x01
     a1a:	87 e9       	ldi	r24, 0x97	; 151
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	90 93 95 00 	sts	0x0095, r25
     a22:	80 93 94 00 	sts	0x0094, r24
     a26:	4f c0       	rjmp	.+158    	; 0xac6 <usbDriverDescriptor+0xd8>
     a28:	8b 81       	ldd	r24, Y+3	; 0x03
     a2a:	82 30       	cpi	r24, 0x02	; 2
     a2c:	49 f4       	brne	.+18     	; 0xa40 <usbDriverDescriptor+0x52>
     a2e:	82 e2       	ldi	r24, 0x22	; 34
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	89 ea       	ldi	r24, 0xA9	; 169
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	90 93 95 00 	sts	0x0095, r25
     a3a:	80 93 94 00 	sts	0x0094, r24
     a3e:	43 c0       	rjmp	.+134    	; 0xac6 <usbDriverDescriptor+0xd8>
     a40:	8b 81       	ldd	r24, Y+3	; 0x03
     a42:	83 30       	cpi	r24, 0x03	; 3
     a44:	49 f5       	brne	.+82     	; 0xa98 <usbDriverDescriptor+0xaa>
     a46:	8d 81       	ldd	r24, Y+5	; 0x05
     a48:	9e 81       	ldd	r25, Y+6	; 0x06
     a4a:	fc 01       	movw	r30, r24
     a4c:	82 81       	ldd	r24, Z+2	; 0x02
     a4e:	8c 83       	std	Y+4, r24	; 0x04
     a50:	8c 81       	ldd	r24, Y+4	; 0x04
     a52:	88 23       	and	r24, r24
     a54:	49 f4       	brne	.+18     	; 0xa68 <usbDriverDescriptor+0x7a>
     a56:	84 e0       	ldi	r24, 0x04	; 4
     a58:	89 83       	std	Y+1, r24	; 0x01
     a5a:	8d e5       	ldi	r24, 0x5D	; 93
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	90 93 95 00 	sts	0x0095, r25
     a62:	80 93 94 00 	sts	0x0094, r24
     a66:	17 c0       	rjmp	.+46     	; 0xa96 <usbDriverDescriptor+0xa8>
     a68:	8c 81       	ldd	r24, Y+4	; 0x04
     a6a:	81 30       	cpi	r24, 0x01	; 1
     a6c:	49 f4       	brne	.+18     	; 0xa80 <usbDriverDescriptor+0x92>
     a6e:	88 e1       	ldi	r24, 0x18	; 24
     a70:	89 83       	std	Y+1, r24	; 0x01
     a72:	81 e6       	ldi	r24, 0x61	; 97
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	90 93 95 00 	sts	0x0095, r25
     a7a:	80 93 94 00 	sts	0x0094, r24
     a7e:	0b c0       	rjmp	.+22     	; 0xa96 <usbDriverDescriptor+0xa8>
     a80:	8c 81       	ldd	r24, Y+4	; 0x04
     a82:	82 30       	cpi	r24, 0x02	; 2
     a84:	41 f4       	brne	.+16     	; 0xa96 <usbDriverDescriptor+0xa8>
     a86:	8e e1       	ldi	r24, 0x1E	; 30
     a88:	89 83       	std	Y+1, r24	; 0x01
     a8a:	89 e7       	ldi	r24, 0x79	; 121
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	90 93 95 00 	sts	0x0095, r25
     a92:	80 93 94 00 	sts	0x0094, r24
     a96:	17 c0       	rjmp	.+46     	; 0xac6 <usbDriverDescriptor+0xd8>
     a98:	8b 81       	ldd	r24, Y+3	; 0x03
     a9a:	81 32       	cpi	r24, 0x21	; 33
     a9c:	49 f4       	brne	.+18     	; 0xab0 <usbDriverDescriptor+0xc2>
     a9e:	89 e0       	ldi	r24, 0x09	; 9
     aa0:	89 83       	std	Y+1, r24	; 0x01
     aa2:	8b eb       	ldi	r24, 0xBB	; 187
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	90 93 95 00 	sts	0x0095, r25
     aaa:	80 93 94 00 	sts	0x0094, r24
     aae:	0b c0       	rjmp	.+22     	; 0xac6 <usbDriverDescriptor+0xd8>
     ab0:	8b 81       	ldd	r24, Y+3	; 0x03
     ab2:	82 32       	cpi	r24, 0x22	; 34
     ab4:	41 f4       	brne	.+16     	; 0xac6 <usbDriverDescriptor+0xd8>
     ab6:	8f e3       	ldi	r24, 0x3F	; 63
     ab8:	89 83       	std	Y+1, r24	; 0x01
     aba:	8e e1       	ldi	r24, 0x1E	; 30
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	90 93 95 00 	sts	0x0095, r25
     ac2:	80 93 94 00 	sts	0x0094, r24
     ac6:	8a 81       	ldd	r24, Y+2	; 0x02
     ac8:	80 93 78 00 	sts	0x0078, r24
     acc:	89 81       	ldd	r24, Y+1	; 0x01
     ace:	26 96       	adiw	r28, 0x06	; 6
     ad0:	0f b6       	in	r0, 0x3f	; 63
     ad2:	f8 94       	cli
     ad4:	de bf       	out	0x3e, r29	; 62
     ad6:	0f be       	out	0x3f, r0	; 63
     ad8:	cd bf       	out	0x3d, r28	; 61
     ada:	df 91       	pop	r29
     adc:	cf 91       	pop	r28
     ade:	08 95       	ret

00000ae0 <usbDriverSetup>:
     ae0:	cf 93       	push	r28
     ae2:	df 93       	push	r29
     ae4:	cd b7       	in	r28, 0x3d	; 61
     ae6:	de b7       	in	r29, 0x3e	; 62
     ae8:	28 97       	sbiw	r28, 0x08	; 8
     aea:	0f b6       	in	r0, 0x3f	; 63
     aec:	f8 94       	cli
     aee:	de bf       	out	0x3e, r29	; 62
     af0:	0f be       	out	0x3f, r0	; 63
     af2:	cd bf       	out	0x3d, r28	; 61
     af4:	98 87       	std	Y+8, r25	; 0x08
     af6:	8f 83       	std	Y+7, r24	; 0x07
     af8:	19 82       	std	Y+1, r1	; 0x01
     afa:	83 e8       	ldi	r24, 0x83	; 131
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	9b 83       	std	Y+3, r25	; 0x03
     b00:	8a 83       	std	Y+2, r24	; 0x02
     b02:	8f 81       	ldd	r24, Y+7	; 0x07
     b04:	98 85       	ldd	r25, Y+8	; 0x08
     b06:	fc 01       	movw	r30, r24
     b08:	82 81       	ldd	r24, Z+2	; 0x02
     b0a:	8c 83       	std	Y+4, r24	; 0x04
     b0c:	8a 81       	ldd	r24, Y+2	; 0x02
     b0e:	9b 81       	ldd	r25, Y+3	; 0x03
     b10:	fc 01       	movw	r30, r24
     b12:	10 82       	st	Z, r1
     b14:	8f 81       	ldd	r24, Y+7	; 0x07
     b16:	98 85       	ldd	r25, Y+8	; 0x08
     b18:	fc 01       	movw	r30, r24
     b1a:	81 81       	ldd	r24, Z+1	; 0x01
     b1c:	8d 83       	std	Y+5, r24	; 0x05
     b1e:	8d 81       	ldd	r24, Y+5	; 0x05
     b20:	88 23       	and	r24, r24
     b22:	71 f4       	brne	.+28     	; 0xb40 <usbDriverSetup+0x60>
     b24:	8f 81       	ldd	r24, Y+7	; 0x07
     b26:	98 85       	ldd	r25, Y+8	; 0x08
     b28:	fc 01       	movw	r30, r24
     b2a:	80 81       	ld	r24, Z
     b2c:	8f 71       	andi	r24, 0x1F	; 31
     b2e:	8e 83       	std	Y+6, r24	; 0x06
     b30:	8a 81       	ldd	r24, Y+2	; 0x02
     b32:	9b 81       	ldd	r25, Y+3	; 0x03
     b34:	01 96       	adiw	r24, 0x01	; 1
     b36:	fc 01       	movw	r30, r24
     b38:	10 82       	st	Z, r1
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	89 83       	std	Y+1, r24	; 0x01
     b3e:	2c c0       	rjmp	.+88     	; 0xb98 <usbDriverSetup+0xb8>
     b40:	8d 81       	ldd	r24, Y+5	; 0x05
     b42:	85 30       	cpi	r24, 0x05	; 5
     b44:	21 f4       	brne	.+8      	; 0xb4e <usbDriverSetup+0x6e>
     b46:	8c 81       	ldd	r24, Y+4	; 0x04
     b48:	80 93 97 00 	sts	0x0097, r24
     b4c:	25 c0       	rjmp	.+74     	; 0xb98 <usbDriverSetup+0xb8>
     b4e:	8d 81       	ldd	r24, Y+5	; 0x05
     b50:	86 30       	cpi	r24, 0x06	; 6
     b52:	29 f4       	brne	.+10     	; 0xb5e <usbDriverSetup+0x7e>
     b54:	8f 81       	ldd	r24, Y+7	; 0x07
     b56:	98 85       	ldd	r25, Y+8	; 0x08
     b58:	4a df       	rcall	.-364    	; 0x9ee <usbDriverDescriptor>
     b5a:	89 83       	std	Y+1, r24	; 0x01
     b5c:	23 c0       	rjmp	.+70     	; 0xba4 <usbDriverSetup+0xc4>
     b5e:	8d 81       	ldd	r24, Y+5	; 0x05
     b60:	88 30       	cpi	r24, 0x08	; 8
     b62:	39 f4       	brne	.+14     	; 0xb72 <usbDriverSetup+0x92>
     b64:	89 e9       	ldi	r24, 0x99	; 153
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	9b 83       	std	Y+3, r25	; 0x03
     b6a:	8a 83       	std	Y+2, r24	; 0x02
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	89 83       	std	Y+1, r24	; 0x01
     b70:	13 c0       	rjmp	.+38     	; 0xb98 <usbDriverSetup+0xb8>
     b72:	8d 81       	ldd	r24, Y+5	; 0x05
     b74:	89 30       	cpi	r24, 0x09	; 9
     b76:	29 f4       	brne	.+10     	; 0xb82 <usbDriverSetup+0xa2>
     b78:	8c 81       	ldd	r24, Y+4	; 0x04
     b7a:	80 93 99 00 	sts	0x0099, r24
     b7e:	bd de       	rcall	.-646    	; 0x8fa <usbResetStall>
     b80:	0b c0       	rjmp	.+22     	; 0xb98 <usbDriverSetup+0xb8>
     b82:	8d 81       	ldd	r24, Y+5	; 0x05
     b84:	8a 30       	cpi	r24, 0x0A	; 10
     b86:	19 f4       	brne	.+6      	; 0xb8e <usbDriverSetup+0xae>
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	89 83       	std	Y+1, r24	; 0x01
     b8c:	05 c0       	rjmp	.+10     	; 0xb98 <usbDriverSetup+0xb8>
     b8e:	8d 81       	ldd	r24, Y+5	; 0x05
     b90:	8b 30       	cpi	r24, 0x0B	; 11
     b92:	11 f4       	brne	.+4      	; 0xb98 <usbDriverSetup+0xb8>
     b94:	a8 de       	rcall	.-688    	; 0x8e6 <usbResetDataToggling>
     b96:	b1 de       	rcall	.-670    	; 0x8fa <usbResetStall>
     b98:	8a 81       	ldd	r24, Y+2	; 0x02
     b9a:	9b 81       	ldd	r25, Y+3	; 0x03
     b9c:	90 93 95 00 	sts	0x0095, r25
     ba0:	80 93 94 00 	sts	0x0094, r24
     ba4:	89 81       	ldd	r24, Y+1	; 0x01
     ba6:	28 96       	adiw	r28, 0x08	; 8
     ba8:	0f b6       	in	r0, 0x3f	; 63
     baa:	f8 94       	cli
     bac:	de bf       	out	0x3e, r29	; 62
     bae:	0f be       	out	0x3f, r0	; 63
     bb0:	cd bf       	out	0x3d, r28	; 61
     bb2:	df 91       	pop	r29
     bb4:	cf 91       	pop	r28
     bb6:	08 95       	ret

00000bb8 <usbProcessRx>:
     bb8:	cf 93       	push	r28
     bba:	df 93       	push	r29
     bbc:	cd b7       	in	r28, 0x3d	; 61
     bbe:	de b7       	in	r29, 0x3e	; 62
     bc0:	27 97       	sbiw	r28, 0x07	; 7
     bc2:	0f b6       	in	r0, 0x3f	; 63
     bc4:	f8 94       	cli
     bc6:	de bf       	out	0x3e, r29	; 62
     bc8:	0f be       	out	0x3f, r0	; 63
     bca:	cd bf       	out	0x3d, r28	; 61
     bcc:	9e 83       	std	Y+6, r25	; 0x06
     bce:	8d 83       	std	Y+5, r24	; 0x05
     bd0:	6f 83       	std	Y+7, r22	; 0x07
     bd2:	8d 81       	ldd	r24, Y+5	; 0x05
     bd4:	9e 81       	ldd	r25, Y+6	; 0x06
     bd6:	9b 83       	std	Y+3, r25	; 0x03
     bd8:	8a 83       	std	Y+2, r24	; 0x02
     bda:	80 91 92 00 	lds	r24, 0x0092
     bde:	8d 32       	cpi	r24, 0x2D	; 45
     be0:	99 f5       	brne	.+102    	; 0xc48 <usbProcessRx+0x90>
     be2:	8f 81       	ldd	r24, Y+7	; 0x07
     be4:	88 30       	cpi	r24, 0x08	; 8
     be6:	09 f0       	breq	.+2      	; 0xbea <usbProcessRx+0x32>
     be8:	2f c0       	rjmp	.+94     	; 0xc48 <usbProcessRx+0x90>
     bea:	83 ec       	ldi	r24, 0xC3	; 195
     bec:	80 93 7a 00 	sts	0x007A, r24
     bf0:	8a e5       	ldi	r24, 0x5A	; 90
     bf2:	80 93 65 00 	sts	0x0065, r24
     bf6:	10 92 78 00 	sts	0x0078, r1
     bfa:	8a 81       	ldd	r24, Y+2	; 0x02
     bfc:	9b 81       	ldd	r25, Y+3	; 0x03
     bfe:	fc 01       	movw	r30, r24
     c00:	80 81       	ld	r24, Z
     c02:	80 76       	andi	r24, 0x60	; 96
     c04:	8c 83       	std	Y+4, r24	; 0x04
     c06:	8c 81       	ldd	r24, Y+4	; 0x04
     c08:	88 23       	and	r24, r24
     c0a:	29 f0       	breq	.+10     	; 0xc16 <usbProcessRx+0x5e>
     c0c:	8d 81       	ldd	r24, Y+5	; 0x05
     c0e:	9e 81       	ldd	r25, Y+6	; 0x06
     c10:	a0 dc       	rcall	.-1728   	; 0x552 <usbFunctionSetup>
     c12:	89 83       	std	Y+1, r24	; 0x01
     c14:	04 c0       	rjmp	.+8      	; 0xc1e <usbProcessRx+0x66>
     c16:	8a 81       	ldd	r24, Y+2	; 0x02
     c18:	9b 81       	ldd	r25, Y+3	; 0x03
     c1a:	62 df       	rcall	.-316    	; 0xae0 <usbDriverSetup>
     c1c:	89 83       	std	Y+1, r24	; 0x01
     c1e:	8a 81       	ldd	r24, Y+2	; 0x02
     c20:	9b 81       	ldd	r25, Y+3	; 0x03
     c22:	fc 01       	movw	r30, r24
     c24:	87 81       	ldd	r24, Z+7	; 0x07
     c26:	88 23       	and	r24, r24
     c28:	61 f4       	brne	.+24     	; 0xc42 <usbProcessRx+0x8a>
     c2a:	8a 81       	ldd	r24, Y+2	; 0x02
     c2c:	9b 81       	ldd	r25, Y+3	; 0x03
     c2e:	fc 01       	movw	r30, r24
     c30:	96 81       	ldd	r25, Z+6	; 0x06
     c32:	89 81       	ldd	r24, Y+1	; 0x01
     c34:	98 17       	cp	r25, r24
     c36:	28 f4       	brcc	.+10     	; 0xc42 <usbProcessRx+0x8a>
     c38:	8a 81       	ldd	r24, Y+2	; 0x02
     c3a:	9b 81       	ldd	r25, Y+3	; 0x03
     c3c:	fc 01       	movw	r30, r24
     c3e:	86 81       	ldd	r24, Z+6	; 0x06
     c40:	89 83       	std	Y+1, r24	; 0x01
     c42:	89 81       	ldd	r24, Y+1	; 0x01
     c44:	80 93 66 00 	sts	0x0066, r24
     c48:	27 96       	adiw	r28, 0x07	; 7
     c4a:	0f b6       	in	r0, 0x3f	; 63
     c4c:	f8 94       	cli
     c4e:	de bf       	out	0x3e, r29	; 62
     c50:	0f be       	out	0x3f, r0	; 63
     c52:	cd bf       	out	0x3d, r28	; 61
     c54:	df 91       	pop	r29
     c56:	cf 91       	pop	r28
     c58:	08 95       	ret

00000c5a <usbDeviceRead>:
     c5a:	cf 93       	push	r28
     c5c:	df 93       	push	r29
     c5e:	cd b7       	in	r28, 0x3d	; 61
     c60:	de b7       	in	r29, 0x3e	; 62
     c62:	2a 97       	sbiw	r28, 0x0a	; 10
     c64:	0f b6       	in	r0, 0x3f	; 63
     c66:	f8 94       	cli
     c68:	de bf       	out	0x3e, r29	; 62
     c6a:	0f be       	out	0x3f, r0	; 63
     c6c:	cd bf       	out	0x3d, r28	; 61
     c6e:	99 87       	std	Y+9, r25	; 0x09
     c70:	88 87       	std	Y+8, r24	; 0x08
     c72:	6a 87       	std	Y+10, r22	; 0x0a
     c74:	8a 85       	ldd	r24, Y+10	; 0x0a
     c76:	88 23       	and	r24, r24
     c78:	09 f4       	brne	.+2      	; 0xc7c <usbDeviceRead+0x22>
     c7a:	4f c0       	rjmp	.+158    	; 0xd1a <usbDeviceRead+0xc0>
     c7c:	8a 85       	ldd	r24, Y+10	; 0x0a
     c7e:	89 83       	std	Y+1, r24	; 0x01
     c80:	80 91 94 00 	lds	r24, 0x0094
     c84:	90 91 95 00 	lds	r25, 0x0095
     c88:	9b 83       	std	Y+3, r25	; 0x03
     c8a:	8a 83       	std	Y+2, r24	; 0x02
     c8c:	80 91 78 00 	lds	r24, 0x0078
     c90:	88 2f       	mov	r24, r24
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	80 74       	andi	r24, 0x40	; 64
     c96:	99 27       	eor	r25, r25
     c98:	00 97       	sbiw	r24, 0x00	; 0
     c9a:	09 f1       	breq	.+66     	; 0xcde <usbDeviceRead+0x84>
     c9c:	8a 81       	ldd	r24, Y+2	; 0x02
     c9e:	9b 81       	ldd	r25, Y+3	; 0x03
     ca0:	9d 83       	std	Y+5, r25	; 0x05
     ca2:	8c 83       	std	Y+4, r24	; 0x04
     ca4:	8c 81       	ldd	r24, Y+4	; 0x04
     ca6:	9d 81       	ldd	r25, Y+5	; 0x05
     ca8:	fc 01       	movw	r30, r24
     caa:	84 91       	lpm	r24, Z
     cac:	8e 83       	std	Y+6, r24	; 0x06
     cae:	8e 81       	ldd	r24, Y+6	; 0x06
     cb0:	8f 83       	std	Y+7, r24	; 0x07
     cb2:	88 85       	ldd	r24, Y+8	; 0x08
     cb4:	99 85       	ldd	r25, Y+9	; 0x09
     cb6:	9c 01       	movw	r18, r24
     cb8:	2f 5f       	subi	r18, 0xFF	; 255
     cba:	3f 4f       	sbci	r19, 0xFF	; 255
     cbc:	39 87       	std	Y+9, r19	; 0x09
     cbe:	28 87       	std	Y+8, r18	; 0x08
     cc0:	2f 81       	ldd	r18, Y+7	; 0x07
     cc2:	fc 01       	movw	r30, r24
     cc4:	20 83       	st	Z, r18
     cc6:	8a 81       	ldd	r24, Y+2	; 0x02
     cc8:	9b 81       	ldd	r25, Y+3	; 0x03
     cca:	01 96       	adiw	r24, 0x01	; 1
     ccc:	9b 83       	std	Y+3, r25	; 0x03
     cce:	8a 83       	std	Y+2, r24	; 0x02
     cd0:	89 81       	ldd	r24, Y+1	; 0x01
     cd2:	81 50       	subi	r24, 0x01	; 1
     cd4:	89 83       	std	Y+1, r24	; 0x01
     cd6:	89 81       	ldd	r24, Y+1	; 0x01
     cd8:	88 23       	and	r24, r24
     cda:	01 f7       	brne	.-64     	; 0xc9c <usbDeviceRead+0x42>
     cdc:	18 c0       	rjmp	.+48     	; 0xd0e <usbDeviceRead+0xb4>
     cde:	88 85       	ldd	r24, Y+8	; 0x08
     ce0:	99 85       	ldd	r25, Y+9	; 0x09
     ce2:	9c 01       	movw	r18, r24
     ce4:	2f 5f       	subi	r18, 0xFF	; 255
     ce6:	3f 4f       	sbci	r19, 0xFF	; 255
     ce8:	39 87       	std	Y+9, r19	; 0x09
     cea:	28 87       	std	Y+8, r18	; 0x08
     cec:	2a 81       	ldd	r18, Y+2	; 0x02
     cee:	3b 81       	ldd	r19, Y+3	; 0x03
     cf0:	f9 01       	movw	r30, r18
     cf2:	20 81       	ld	r18, Z
     cf4:	fc 01       	movw	r30, r24
     cf6:	20 83       	st	Z, r18
     cf8:	8a 81       	ldd	r24, Y+2	; 0x02
     cfa:	9b 81       	ldd	r25, Y+3	; 0x03
     cfc:	01 96       	adiw	r24, 0x01	; 1
     cfe:	9b 83       	std	Y+3, r25	; 0x03
     d00:	8a 83       	std	Y+2, r24	; 0x02
     d02:	89 81       	ldd	r24, Y+1	; 0x01
     d04:	81 50       	subi	r24, 0x01	; 1
     d06:	89 83       	std	Y+1, r24	; 0x01
     d08:	89 81       	ldd	r24, Y+1	; 0x01
     d0a:	88 23       	and	r24, r24
     d0c:	41 f7       	brne	.-48     	; 0xcde <usbDeviceRead+0x84>
     d0e:	8a 81       	ldd	r24, Y+2	; 0x02
     d10:	9b 81       	ldd	r25, Y+3	; 0x03
     d12:	90 93 95 00 	sts	0x0095, r25
     d16:	80 93 94 00 	sts	0x0094, r24
     d1a:	8a 85       	ldd	r24, Y+10	; 0x0a
     d1c:	2a 96       	adiw	r28, 0x0a	; 10
     d1e:	0f b6       	in	r0, 0x3f	; 63
     d20:	f8 94       	cli
     d22:	de bf       	out	0x3e, r29	; 62
     d24:	0f be       	out	0x3f, r0	; 63
     d26:	cd bf       	out	0x3d, r28	; 61
     d28:	df 91       	pop	r29
     d2a:	cf 91       	pop	r28
     d2c:	08 95       	ret

00000d2e <usbBuildTxBlock>:
     d2e:	cf 93       	push	r28
     d30:	df 93       	push	r29
     d32:	00 d0       	rcall	.+0      	; 0xd34 <usbBuildTxBlock+0x6>
     d34:	cd b7       	in	r28, 0x3d	; 61
     d36:	de b7       	in	r29, 0x3e	; 62
     d38:	80 91 66 00 	lds	r24, 0x0066
     d3c:	89 83       	std	Y+1, r24	; 0x01
     d3e:	89 81       	ldd	r24, Y+1	; 0x01
     d40:	89 30       	cpi	r24, 0x09	; 9
     d42:	10 f0       	brcs	.+4      	; 0xd48 <usbBuildTxBlock+0x1a>
     d44:	88 e0       	ldi	r24, 0x08	; 8
     d46:	89 83       	std	Y+1, r24	; 0x01
     d48:	90 91 66 00 	lds	r25, 0x0066
     d4c:	89 81       	ldd	r24, Y+1	; 0x01
     d4e:	29 2f       	mov	r18, r25
     d50:	28 1b       	sub	r18, r24
     d52:	82 2f       	mov	r24, r18
     d54:	80 93 66 00 	sts	0x0066, r24
     d58:	90 91 7a 00 	lds	r25, 0x007A
     d5c:	88 e8       	ldi	r24, 0x88	; 136
     d5e:	89 27       	eor	r24, r25
     d60:	80 93 7a 00 	sts	0x007A, r24
     d64:	69 81       	ldd	r22, Y+1	; 0x01
     d66:	8b e7       	ldi	r24, 0x7B	; 123
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	77 df       	rcall	.-274    	; 0xc5a <usbDeviceRead>
     d6c:	8a 83       	std	Y+2, r24	; 0x02
     d6e:	8a 81       	ldd	r24, Y+2	; 0x02
     d70:	89 30       	cpi	r24, 0x09	; 9
     d72:	70 f4       	brcc	.+28     	; 0xd90 <usbBuildTxBlock+0x62>
     d74:	8b e7       	ldi	r24, 0x7B	; 123
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	6a 81       	ldd	r22, Y+2	; 0x02
     d7a:	d9 d9       	rcall	.-3150   	; 0x12e <usbCrc16Append>
     d7c:	8a 81       	ldd	r24, Y+2	; 0x02
     d7e:	8c 5f       	subi	r24, 0xFC	; 252
     d80:	8a 83       	std	Y+2, r24	; 0x02
     d82:	8a 81       	ldd	r24, Y+2	; 0x02
     d84:	8c 30       	cpi	r24, 0x0C	; 12
     d86:	48 f4       	brcc	.+18     	; 0xd9a <usbBuildTxBlock+0x6c>
     d88:	8f ef       	ldi	r24, 0xFF	; 255
     d8a:	80 93 66 00 	sts	0x0066, r24
     d8e:	05 c0       	rjmp	.+10     	; 0xd9a <usbBuildTxBlock+0x6c>
     d90:	8e e1       	ldi	r24, 0x1E	; 30
     d92:	8a 83       	std	Y+2, r24	; 0x02
     d94:	8f ef       	ldi	r24, 0xFF	; 255
     d96:	80 93 66 00 	sts	0x0066, r24
     d9a:	8a 81       	ldd	r24, Y+2	; 0x02
     d9c:	80 93 65 00 	sts	0x0065, r24
     da0:	0f 90       	pop	r0
     da2:	0f 90       	pop	r0
     da4:	df 91       	pop	r29
     da6:	cf 91       	pop	r28
     da8:	08 95       	ret

00000daa <usbHandleResetHook>:
     daa:	cf 93       	push	r28
     dac:	df 93       	push	r29
     dae:	00 d0       	rcall	.+0      	; 0xdb0 <usbHandleResetHook+0x6>
     db0:	cd b7       	in	r28, 0x3d	; 61
     db2:	de b7       	in	r29, 0x3e	; 62
     db4:	8a 83       	std	Y+2, r24	; 0x02
     db6:	81 e0       	ldi	r24, 0x01	; 1
     db8:	9a 81       	ldd	r25, Y+2	; 0x02
     dba:	99 23       	and	r25, r25
     dbc:	09 f0       	breq	.+2      	; 0xdc0 <usbHandleResetHook+0x16>
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	89 83       	std	Y+1, r24	; 0x01
     dc2:	90 91 79 00 	lds	r25, 0x0079
     dc6:	89 81       	ldd	r24, Y+1	; 0x01
     dc8:	98 17       	cp	r25, r24
     dca:	39 f0       	breq	.+14     	; 0xdda <usbHandleResetHook+0x30>
     dcc:	89 81       	ldd	r24, Y+1	; 0x01
     dce:	88 23       	and	r24, r24
     dd0:	09 f4       	brne	.+2      	; 0xdd4 <usbHandleResetHook+0x2a>
     dd2:	87 dc       	rcall	.-1778   	; 0x6e2 <hadUsbReset>
     dd4:	89 81       	ldd	r24, Y+1	; 0x01
     dd6:	80 93 79 00 	sts	0x0079, r24
     dda:	0f 90       	pop	r0
     ddc:	0f 90       	pop	r0
     dde:	df 91       	pop	r29
     de0:	cf 91       	pop	r28
     de2:	08 95       	ret

00000de4 <usbPoll>:
     de4:	cf 93       	push	r28
     de6:	df 93       	push	r29
     de8:	00 d0       	rcall	.+0      	; 0xdea <usbPoll+0x6>
     dea:	1f 92       	push	r1
     dec:	cd b7       	in	r28, 0x3d	; 61
     dee:	de b7       	in	r29, 0x3e	; 62
     df0:	80 91 96 00 	lds	r24, 0x0096
     df4:	83 50       	subi	r24, 0x03	; 3
     df6:	8a 83       	std	Y+2, r24	; 0x02
     df8:	8a 81       	ldd	r24, Y+2	; 0x02
     dfa:	88 23       	and	r24, r24
     dfc:	8c f0       	brlt	.+34     	; 0xe20 <usbPoll+0x3c>
     dfe:	4a 81       	ldd	r20, Y+2	; 0x02
     e00:	80 91 93 00 	lds	r24, 0x0093
     e04:	88 2f       	mov	r24, r24
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	2c e0       	ldi	r18, 0x0C	; 12
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	b9 01       	movw	r22, r18
     e0e:	68 1b       	sub	r22, r24
     e10:	79 0b       	sbc	r23, r25
     e12:	cb 01       	movw	r24, r22
     e14:	86 56       	subi	r24, 0x66	; 102
     e16:	9f 4f       	sbci	r25, 0xFF	; 255
     e18:	64 2f       	mov	r22, r20
     e1a:	ce de       	rcall	.-612    	; 0xbb8 <usbProcessRx>
     e1c:	10 92 96 00 	sts	0x0096, r1
     e20:	80 91 65 00 	lds	r24, 0x0065
     e24:	88 2f       	mov	r24, r24
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	80 71       	andi	r24, 0x10	; 16
     e2a:	99 27       	eor	r25, r25
     e2c:	00 97       	sbiw	r24, 0x00	; 0
     e2e:	29 f0       	breq	.+10     	; 0xe3a <usbPoll+0x56>
     e30:	80 91 66 00 	lds	r24, 0x0066
     e34:	8f 3f       	cpi	r24, 0xFF	; 255
     e36:	09 f0       	breq	.+2      	; 0xe3a <usbPoll+0x56>
     e38:	7a df       	rcall	.-268    	; 0xd2e <usbBuildTxBlock>
     e3a:	84 e1       	ldi	r24, 0x14	; 20
     e3c:	89 83       	std	Y+1, r24	; 0x01
     e3e:	0d c0       	rjmp	.+26     	; 0xe5a <usbPoll+0x76>
     e40:	86 e3       	ldi	r24, 0x36	; 54
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	fc 01       	movw	r30, r24
     e46:	80 81       	ld	r24, Z
     e48:	85 70       	andi	r24, 0x05	; 5
     e4a:	8b 83       	std	Y+3, r24	; 0x03
     e4c:	8b 81       	ldd	r24, Y+3	; 0x03
     e4e:	88 23       	and	r24, r24
     e50:	09 f0       	breq	.+2      	; 0xe54 <usbPoll+0x70>
     e52:	0b c0       	rjmp	.+22     	; 0xe6a <usbPoll+0x86>
     e54:	89 81       	ldd	r24, Y+1	; 0x01
     e56:	81 50       	subi	r24, 0x01	; 1
     e58:	89 83       	std	Y+1, r24	; 0x01
     e5a:	89 81       	ldd	r24, Y+1	; 0x01
     e5c:	88 23       	and	r24, r24
     e5e:	81 f7       	brne	.-32     	; 0xe40 <usbPoll+0x5c>
     e60:	10 92 97 00 	sts	0x0097, r1
     e64:	10 92 91 00 	sts	0x0091, r1
     e68:	48 dd       	rcall	.-1392   	; 0x8fa <usbResetStall>
     e6a:	89 81       	ldd	r24, Y+1	; 0x01
     e6c:	9e df       	rcall	.-196    	; 0xdaa <usbHandleResetHook>
     e6e:	0f 90       	pop	r0
     e70:	0f 90       	pop	r0
     e72:	0f 90       	pop	r0
     e74:	df 91       	pop	r29
     e76:	cf 91       	pop	r28
     e78:	08 95       	ret

00000e7a <usbInit>:
     e7a:	cf 93       	push	r28
     e7c:	df 93       	push	r29
     e7e:	cd b7       	in	r28, 0x3d	; 61
     e80:	de b7       	in	r29, 0x3e	; 62
     e82:	85 e5       	ldi	r24, 0x55	; 85
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	25 e5       	ldi	r18, 0x55	; 85
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	f9 01       	movw	r30, r18
     e8c:	20 81       	ld	r18, Z
     e8e:	22 60       	ori	r18, 0x02	; 2
     e90:	fc 01       	movw	r30, r24
     e92:	20 83       	st	Z, r18
     e94:	8b e5       	ldi	r24, 0x5B	; 91
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	2b e5       	ldi	r18, 0x5B	; 91
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	f9 01       	movw	r30, r18
     e9e:	20 81       	ld	r18, Z
     ea0:	20 64       	ori	r18, 0x40	; 64
     ea2:	fc 01       	movw	r30, r24
     ea4:	20 83       	st	Z, r18
     ea6:	1f dd       	rcall	.-1474   	; 0x8e6 <usbResetDataToggling>
     ea8:	8a e5       	ldi	r24, 0x5A	; 90
     eaa:	80 93 85 00 	sts	0x0085, r24
     eae:	df 91       	pop	r29
     eb0:	cf 91       	pop	r28
     eb2:	08 95       	ret

00000eb4 <__cmpsf2>:
     eb4:	2f d0       	rcall	.+94     	; 0xf14 <__fp_cmp>
     eb6:	08 f4       	brcc	.+2      	; 0xeba <__cmpsf2+0x6>
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	08 95       	ret

00000ebc <__fixunssfsi>:
     ebc:	57 d0       	rcall	.+174    	; 0xf6c <__fp_splitA>
     ebe:	88 f0       	brcs	.+34     	; 0xee2 <__fixunssfsi+0x26>
     ec0:	9f 57       	subi	r25, 0x7F	; 127
     ec2:	90 f0       	brcs	.+36     	; 0xee8 <__fixunssfsi+0x2c>
     ec4:	b9 2f       	mov	r27, r25
     ec6:	99 27       	eor	r25, r25
     ec8:	b7 51       	subi	r27, 0x17	; 23
     eca:	a0 f0       	brcs	.+40     	; 0xef4 <__fixunssfsi+0x38>
     ecc:	d1 f0       	breq	.+52     	; 0xf02 <__fixunssfsi+0x46>
     ece:	66 0f       	add	r22, r22
     ed0:	77 1f       	adc	r23, r23
     ed2:	88 1f       	adc	r24, r24
     ed4:	99 1f       	adc	r25, r25
     ed6:	1a f0       	brmi	.+6      	; 0xede <__fixunssfsi+0x22>
     ed8:	ba 95       	dec	r27
     eda:	c9 f7       	brne	.-14     	; 0xece <__fixunssfsi+0x12>
     edc:	12 c0       	rjmp	.+36     	; 0xf02 <__fixunssfsi+0x46>
     ede:	b1 30       	cpi	r27, 0x01	; 1
     ee0:	81 f0       	breq	.+32     	; 0xf02 <__fixunssfsi+0x46>
     ee2:	5e d0       	rcall	.+188    	; 0xfa0 <__fp_zero>
     ee4:	b1 e0       	ldi	r27, 0x01	; 1
     ee6:	08 95       	ret
     ee8:	5b c0       	rjmp	.+182    	; 0xfa0 <__fp_zero>
     eea:	67 2f       	mov	r22, r23
     eec:	78 2f       	mov	r23, r24
     eee:	88 27       	eor	r24, r24
     ef0:	b8 5f       	subi	r27, 0xF8	; 248
     ef2:	39 f0       	breq	.+14     	; 0xf02 <__fixunssfsi+0x46>
     ef4:	b9 3f       	cpi	r27, 0xF9	; 249
     ef6:	cc f3       	brlt	.-14     	; 0xeea <__fixunssfsi+0x2e>
     ef8:	86 95       	lsr	r24
     efa:	77 95       	ror	r23
     efc:	67 95       	ror	r22
     efe:	b3 95       	inc	r27
     f00:	d9 f7       	brne	.-10     	; 0xef8 <__fixunssfsi+0x3c>
     f02:	3e f4       	brtc	.+14     	; 0xf12 <__fixunssfsi+0x56>
     f04:	90 95       	com	r25
     f06:	80 95       	com	r24
     f08:	70 95       	com	r23
     f0a:	61 95       	neg	r22
     f0c:	7f 4f       	sbci	r23, 0xFF	; 255
     f0e:	8f 4f       	sbci	r24, 0xFF	; 255
     f10:	9f 4f       	sbci	r25, 0xFF	; 255
     f12:	08 95       	ret

00000f14 <__fp_cmp>:
     f14:	99 0f       	add	r25, r25
     f16:	00 08       	sbc	r0, r0
     f18:	55 0f       	add	r21, r21
     f1a:	aa 0b       	sbc	r26, r26
     f1c:	e0 e8       	ldi	r30, 0x80	; 128
     f1e:	fe ef       	ldi	r31, 0xFE	; 254
     f20:	16 16       	cp	r1, r22
     f22:	17 06       	cpc	r1, r23
     f24:	e8 07       	cpc	r30, r24
     f26:	f9 07       	cpc	r31, r25
     f28:	c0 f0       	brcs	.+48     	; 0xf5a <__fp_cmp+0x46>
     f2a:	12 16       	cp	r1, r18
     f2c:	13 06       	cpc	r1, r19
     f2e:	e4 07       	cpc	r30, r20
     f30:	f5 07       	cpc	r31, r21
     f32:	98 f0       	brcs	.+38     	; 0xf5a <__fp_cmp+0x46>
     f34:	62 1b       	sub	r22, r18
     f36:	73 0b       	sbc	r23, r19
     f38:	84 0b       	sbc	r24, r20
     f3a:	95 0b       	sbc	r25, r21
     f3c:	39 f4       	brne	.+14     	; 0xf4c <__fp_cmp+0x38>
     f3e:	0a 26       	eor	r0, r26
     f40:	61 f0       	breq	.+24     	; 0xf5a <__fp_cmp+0x46>
     f42:	23 2b       	or	r18, r19
     f44:	24 2b       	or	r18, r20
     f46:	25 2b       	or	r18, r21
     f48:	21 f4       	brne	.+8      	; 0xf52 <__fp_cmp+0x3e>
     f4a:	08 95       	ret
     f4c:	0a 26       	eor	r0, r26
     f4e:	09 f4       	brne	.+2      	; 0xf52 <__fp_cmp+0x3e>
     f50:	a1 40       	sbci	r26, 0x01	; 1
     f52:	a6 95       	lsr	r26
     f54:	8f ef       	ldi	r24, 0xFF	; 255
     f56:	81 1d       	adc	r24, r1
     f58:	81 1d       	adc	r24, r1
     f5a:	08 95       	ret

00000f5c <__fp_split3>:
     f5c:	57 fd       	sbrc	r21, 7
     f5e:	90 58       	subi	r25, 0x80	; 128
     f60:	44 0f       	add	r20, r20
     f62:	55 1f       	adc	r21, r21
     f64:	59 f0       	breq	.+22     	; 0xf7c <__fp_splitA+0x10>
     f66:	5f 3f       	cpi	r21, 0xFF	; 255
     f68:	71 f0       	breq	.+28     	; 0xf86 <__fp_splitA+0x1a>
     f6a:	47 95       	ror	r20

00000f6c <__fp_splitA>:
     f6c:	88 0f       	add	r24, r24
     f6e:	97 fb       	bst	r25, 7
     f70:	99 1f       	adc	r25, r25
     f72:	61 f0       	breq	.+24     	; 0xf8c <__fp_splitA+0x20>
     f74:	9f 3f       	cpi	r25, 0xFF	; 255
     f76:	79 f0       	breq	.+30     	; 0xf96 <__fp_splitA+0x2a>
     f78:	87 95       	ror	r24
     f7a:	08 95       	ret
     f7c:	12 16       	cp	r1, r18
     f7e:	13 06       	cpc	r1, r19
     f80:	14 06       	cpc	r1, r20
     f82:	55 1f       	adc	r21, r21
     f84:	f2 cf       	rjmp	.-28     	; 0xf6a <__fp_split3+0xe>
     f86:	46 95       	lsr	r20
     f88:	f1 df       	rcall	.-30     	; 0xf6c <__fp_splitA>
     f8a:	08 c0       	rjmp	.+16     	; 0xf9c <__fp_splitA+0x30>
     f8c:	16 16       	cp	r1, r22
     f8e:	17 06       	cpc	r1, r23
     f90:	18 06       	cpc	r1, r24
     f92:	99 1f       	adc	r25, r25
     f94:	f1 cf       	rjmp	.-30     	; 0xf78 <__fp_splitA+0xc>
     f96:	86 95       	lsr	r24
     f98:	71 05       	cpc	r23, r1
     f9a:	61 05       	cpc	r22, r1
     f9c:	08 94       	sec
     f9e:	08 95       	ret

00000fa0 <__fp_zero>:
     fa0:	e8 94       	clt

00000fa2 <__fp_szero>:
     fa2:	bb 27       	eor	r27, r27
     fa4:	66 27       	eor	r22, r22
     fa6:	77 27       	eor	r23, r23
     fa8:	cb 01       	movw	r24, r22
     faa:	97 f9       	bld	r25, 7
     fac:	08 95       	ret

00000fae <__gesf2>:
     fae:	b2 df       	rcall	.-156    	; 0xf14 <__fp_cmp>
     fb0:	08 f4       	brcc	.+2      	; 0xfb4 <__gesf2+0x6>
     fb2:	8f ef       	ldi	r24, 0xFF	; 255
     fb4:	08 95       	ret

00000fb6 <__mulsf3>:
     fb6:	0a d0       	rcall	.+20     	; 0xfcc <__mulsf3x>
     fb8:	80 c0       	rjmp	.+256    	; 0x10ba <__fp_round>
     fba:	71 d0       	rcall	.+226    	; 0x109e <__fp_pscA>
     fbc:	28 f0       	brcs	.+10     	; 0xfc8 <__mulsf3+0x12>
     fbe:	76 d0       	rcall	.+236    	; 0x10ac <__fp_pscB>
     fc0:	18 f0       	brcs	.+6      	; 0xfc8 <__mulsf3+0x12>
     fc2:	95 23       	and	r25, r21
     fc4:	09 f0       	breq	.+2      	; 0xfc8 <__mulsf3+0x12>
     fc6:	62 c0       	rjmp	.+196    	; 0x108c <__fp_inf>
     fc8:	67 c0       	rjmp	.+206    	; 0x1098 <__fp_nan>
     fca:	eb cf       	rjmp	.-42     	; 0xfa2 <__fp_szero>

00000fcc <__mulsf3x>:
     fcc:	c7 df       	rcall	.-114    	; 0xf5c <__fp_split3>
     fce:	a8 f3       	brcs	.-22     	; 0xfba <__mulsf3+0x4>

00000fd0 <__mulsf3_pse>:
     fd0:	99 23       	and	r25, r25
     fd2:	d9 f3       	breq	.-10     	; 0xfca <__mulsf3+0x14>
     fd4:	55 23       	and	r21, r21
     fd6:	c9 f3       	breq	.-14     	; 0xfca <__mulsf3+0x14>
     fd8:	95 0f       	add	r25, r21
     fda:	50 e0       	ldi	r21, 0x00	; 0
     fdc:	55 1f       	adc	r21, r21
     fde:	aa 27       	eor	r26, r26
     fe0:	ee 27       	eor	r30, r30
     fe2:	ff 27       	eor	r31, r31
     fe4:	bb 27       	eor	r27, r27
     fe6:	00 24       	eor	r0, r0
     fe8:	08 94       	sec
     fea:	67 95       	ror	r22
     fec:	20 f4       	brcc	.+8      	; 0xff6 <__mulsf3_pse+0x26>
     fee:	e2 0f       	add	r30, r18
     ff0:	f3 1f       	adc	r31, r19
     ff2:	b4 1f       	adc	r27, r20
     ff4:	0a 1e       	adc	r0, r26
     ff6:	22 0f       	add	r18, r18
     ff8:	33 1f       	adc	r19, r19
     ffa:	44 1f       	adc	r20, r20
     ffc:	aa 1f       	adc	r26, r26
     ffe:	66 95       	lsr	r22
    1000:	a9 f7       	brne	.-22     	; 0xfec <__mulsf3_pse+0x1c>
    1002:	77 95       	ror	r23
    1004:	30 f4       	brcc	.+12     	; 0x1012 <__mulsf3_pse+0x42>
    1006:	f3 0f       	add	r31, r19
    1008:	b4 1f       	adc	r27, r20
    100a:	0a 1e       	adc	r0, r26
    100c:	12 1e       	adc	r1, r18
    100e:	08 f4       	brcc	.+2      	; 0x1012 <__mulsf3_pse+0x42>
    1010:	63 95       	inc	r22
    1012:	33 0f       	add	r19, r19
    1014:	44 1f       	adc	r20, r20
    1016:	aa 1f       	adc	r26, r26
    1018:	22 1f       	adc	r18, r18
    101a:	76 95       	lsr	r23
    101c:	99 f7       	brne	.-26     	; 0x1004 <__mulsf3_pse+0x34>
    101e:	87 95       	ror	r24
    1020:	20 f4       	brcc	.+8      	; 0x102a <__mulsf3_pse+0x5a>
    1022:	b4 0f       	add	r27, r20
    1024:	0a 1e       	adc	r0, r26
    1026:	12 1e       	adc	r1, r18
    1028:	63 1f       	adc	r22, r19
    102a:	44 0f       	add	r20, r20
    102c:	aa 1f       	adc	r26, r26
    102e:	22 1f       	adc	r18, r18
    1030:	33 1f       	adc	r19, r19
    1032:	86 95       	lsr	r24
    1034:	a9 f7       	brne	.-22     	; 0x1020 <__mulsf3_pse+0x50>
    1036:	86 2f       	mov	r24, r22
    1038:	71 2d       	mov	r23, r1
    103a:	60 2d       	mov	r22, r0
    103c:	11 24       	eor	r1, r1
    103e:	9f 57       	subi	r25, 0x7F	; 127
    1040:	50 40       	sbci	r21, 0x00	; 0
    1042:	8a f0       	brmi	.+34     	; 0x1066 <__mulsf3_pse+0x96>
    1044:	e1 f0       	breq	.+56     	; 0x107e <__mulsf3_pse+0xae>
    1046:	88 23       	and	r24, r24
    1048:	4a f0       	brmi	.+18     	; 0x105c <__mulsf3_pse+0x8c>
    104a:	ee 0f       	add	r30, r30
    104c:	ff 1f       	adc	r31, r31
    104e:	bb 1f       	adc	r27, r27
    1050:	66 1f       	adc	r22, r22
    1052:	77 1f       	adc	r23, r23
    1054:	88 1f       	adc	r24, r24
    1056:	91 50       	subi	r25, 0x01	; 1
    1058:	50 40       	sbci	r21, 0x00	; 0
    105a:	a9 f7       	brne	.-22     	; 0x1046 <__mulsf3_pse+0x76>
    105c:	9e 3f       	cpi	r25, 0xFE	; 254
    105e:	51 05       	cpc	r21, r1
    1060:	70 f0       	brcs	.+28     	; 0x107e <__mulsf3_pse+0xae>
    1062:	14 c0       	rjmp	.+40     	; 0x108c <__fp_inf>
    1064:	9e cf       	rjmp	.-196    	; 0xfa2 <__fp_szero>
    1066:	5f 3f       	cpi	r21, 0xFF	; 255
    1068:	ec f3       	brlt	.-6      	; 0x1064 <__mulsf3_pse+0x94>
    106a:	98 3e       	cpi	r25, 0xE8	; 232
    106c:	dc f3       	brlt	.-10     	; 0x1064 <__mulsf3_pse+0x94>
    106e:	86 95       	lsr	r24
    1070:	77 95       	ror	r23
    1072:	67 95       	ror	r22
    1074:	b7 95       	ror	r27
    1076:	f7 95       	ror	r31
    1078:	e7 95       	ror	r30
    107a:	9f 5f       	subi	r25, 0xFF	; 255
    107c:	c1 f7       	brne	.-16     	; 0x106e <__mulsf3_pse+0x9e>
    107e:	fe 2b       	or	r31, r30
    1080:	88 0f       	add	r24, r24
    1082:	91 1d       	adc	r25, r1
    1084:	96 95       	lsr	r25
    1086:	87 95       	ror	r24
    1088:	97 f9       	bld	r25, 7
    108a:	08 95       	ret

0000108c <__fp_inf>:
    108c:	97 f9       	bld	r25, 7
    108e:	9f 67       	ori	r25, 0x7F	; 127
    1090:	80 e8       	ldi	r24, 0x80	; 128
    1092:	70 e0       	ldi	r23, 0x00	; 0
    1094:	60 e0       	ldi	r22, 0x00	; 0
    1096:	08 95       	ret

00001098 <__fp_nan>:
    1098:	9f ef       	ldi	r25, 0xFF	; 255
    109a:	80 ec       	ldi	r24, 0xC0	; 192
    109c:	08 95       	ret

0000109e <__fp_pscA>:
    109e:	00 24       	eor	r0, r0
    10a0:	0a 94       	dec	r0
    10a2:	16 16       	cp	r1, r22
    10a4:	17 06       	cpc	r1, r23
    10a6:	18 06       	cpc	r1, r24
    10a8:	09 06       	cpc	r0, r25
    10aa:	08 95       	ret

000010ac <__fp_pscB>:
    10ac:	00 24       	eor	r0, r0
    10ae:	0a 94       	dec	r0
    10b0:	12 16       	cp	r1, r18
    10b2:	13 06       	cpc	r1, r19
    10b4:	14 06       	cpc	r1, r20
    10b6:	05 06       	cpc	r0, r21
    10b8:	08 95       	ret

000010ba <__fp_round>:
    10ba:	09 2e       	mov	r0, r25
    10bc:	03 94       	inc	r0
    10be:	00 0c       	add	r0, r0
    10c0:	11 f4       	brne	.+4      	; 0x10c6 <__fp_round+0xc>
    10c2:	88 23       	and	r24, r24
    10c4:	52 f0       	brmi	.+20     	; 0x10da <__fp_round+0x20>
    10c6:	bb 0f       	add	r27, r27
    10c8:	40 f4       	brcc	.+16     	; 0x10da <__fp_round+0x20>
    10ca:	bf 2b       	or	r27, r31
    10cc:	11 f4       	brne	.+4      	; 0x10d2 <__fp_round+0x18>
    10ce:	60 ff       	sbrs	r22, 0
    10d0:	04 c0       	rjmp	.+8      	; 0x10da <__fp_round+0x20>
    10d2:	6f 5f       	subi	r22, 0xFF	; 255
    10d4:	7f 4f       	sbci	r23, 0xFF	; 255
    10d6:	8f 4f       	sbci	r24, 0xFF	; 255
    10d8:	9f 4f       	sbci	r25, 0xFF	; 255
    10da:	08 95       	ret

000010dc <__eerd_byte_tn85>:
    10dc:	e1 99       	sbic	0x1c, 1	; 28
    10de:	fe cf       	rjmp	.-4      	; 0x10dc <__eerd_byte_tn85>
    10e0:	9f bb       	out	0x1f, r25	; 31
    10e2:	8e bb       	out	0x1e, r24	; 30
    10e4:	e0 9a       	sbi	0x1c, 0	; 28
    10e6:	99 27       	eor	r25, r25
    10e8:	8d b3       	in	r24, 0x1d	; 29
    10ea:	08 95       	ret

000010ec <__eewr_byte_tn85>:
    10ec:	26 2f       	mov	r18, r22

000010ee <__eewr_r18_tn85>:
    10ee:	e1 99       	sbic	0x1c, 1	; 28
    10f0:	fe cf       	rjmp	.-4      	; 0x10ee <__eewr_r18_tn85>
    10f2:	1c ba       	out	0x1c, r1	; 28
    10f4:	9f bb       	out	0x1f, r25	; 31
    10f6:	8e bb       	out	0x1e, r24	; 30
    10f8:	2d bb       	out	0x1d, r18	; 29
    10fa:	0f b6       	in	r0, 0x3f	; 63
    10fc:	f8 94       	cli
    10fe:	e2 9a       	sbi	0x1c, 2	; 28
    1100:	e1 9a       	sbi	0x1c, 1	; 28
    1102:	0f be       	out	0x3f, r0	; 63
    1104:	01 96       	adiw	r24, 0x01	; 1
    1106:	08 95       	ret

00001108 <_exit>:
    1108:	f8 94       	cli

0000110a <__stop_program>:
    110a:	ff cf       	rjmp	.-2      	; 0x110a <__stop_program>
